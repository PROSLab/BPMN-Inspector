{"version":3,"file":"GeneratorIO.js","sourceRoot":"","sources":["src/GeneratorIO.ts"],"names":[],"mappings":"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","sourcesContent":["import type File from '@hilla/generator-typescript-core/File.js';\nimport Plugin, { PluginConstructor } from '@hilla/generator-typescript-core/Plugin.js';\nimport type LoggerFactory from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport { access, mkdir, readFile, rm, writeFile } from 'fs/promises';\nimport { createRequire } from 'module';\nimport { dirname, isAbsolute, join, resolve } from 'path';\nimport { pathToFileURL } from 'url';\nimport { constants } from 'fs';\nimport GeneratorIOException from './GeneratorIOException.js';\n\nexport default class GeneratorIO {\n  public readonly cwd: string;\n  static readonly INDEX_FILENAME = 'generated-file-list.txt';\n  readonly #logger: LoggerFactory;\n  readonly #outputDir: string;\n  readonly #require: NodeRequire;\n\n  public constructor(outputDir: string, logger: LoggerFactory) {\n    this.cwd = process.cwd();\n    this.#outputDir = isAbsolute(outputDir) ? outputDir : resolve(this.cwd, outputDir);\n    this.#logger = logger;\n    this.#require = createRequire(import.meta.url);\n\n    logger.global.info(`Output directory: ${this.#outputDir}`);\n  }\n\n  /**\n   * Cleans the output directory by removing all files that had been generated last time.\n   * A list of those files is found in {@link GeneratorIO.INDEX_FILENAME}.\n   * @return a set containing deleted filenames\n   */\n  public async cleanOutputDir(): Promise<Set<string>> {\n    this.#logger.global.debug(`Cleaning ${this.#outputDir} up.`);\n    await mkdir(this.#outputDir, { recursive: true });\n    const indexFile = resolve(this.#outputDir, GeneratorIO.INDEX_FILENAME);\n    const deletedFiles = new Set<string>();\n\n    try {\n      const indexFileContents = await this.read(indexFile);\n      const filesToDelete = indexFileContents.split('\\n').filter((n) => n.length);\n\n      await Promise.all(\n        filesToDelete.map(async (filename) => {\n          this.#logger.global.debug(`Deleting file ${filename}.`);\n          await rm(join(this.#outputDir, filename));\n          deletedFiles.add(filename);\n        }),\n      );\n\n      this.#logger.global.debug(`Deleting index file ${indexFile}.`);\n      await rm(indexFile);\n    } catch (err: any) {\n      // non-existing file is OK, all other errors must be rethrown\n      if (err.code !== 'ENOENT') {\n        throw err;\n      }\n    }\n\n    return deletedFiles;\n  }\n\n  public async createFileIndex(filenames: string[]) {\n    const path = join(this.#outputDir, GeneratorIO.INDEX_FILENAME);\n    await writeFile(path, filenames.join('\\n'), 'utf-8');\n  }\n\n  public async loadPlugin(modulePath: string) {\n    this.#logger.global.debug(`Loading plugin: ${modulePath}`);\n    const resolved = pathToFileURL(this.#require.resolve(modulePath));\n    const cls: PluginConstructor = (await import(resolved.toString())).default;\n\n    if (!Object.prototype.isPrototypeOf.call(Plugin, cls)) {\n      throw new GeneratorIOException(`Plugin '${modulePath}' is not an instance of a Plugin class`);\n    }\n\n    return cls;\n  }\n\n  public async read(path: string): Promise<string> {\n    this.#logger.global.debug(`Reading file: ${path}`);\n    return readFile(path, 'utf8');\n  }\n\n  public async write(file: File): Promise<void> {\n    const filePath = join(this.#outputDir, file.name);\n    this.#logger.global.debug(`Writing file ${filePath}.`);\n    const dir = dirname(filePath);\n    await mkdir(dir, { recursive: true });\n    return writeFile(filePath, new Uint8Array(await file.arrayBuffer()));\n  }\n\n  /**\n   * Checks that a file exists (is visible)\n   * @param path the file path to check\n   */\n  public exists(path: string): Promise<boolean> {\n    return new Promise((res, _rej) => {\n      return access(path, constants.F_OK).then(\n        () => {\n          res(true);\n        },\n        () => {\n          res(false);\n        },\n      );\n    });\n  }\n}\n"]}