{"version":3,"file":"index.js","sourceRoot":"","sources":["src/index.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,+CAA+C,CAAC;AACtE,OAAO,aAAa,MAAM,oDAAoD,CAAC;AAC/E,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,WAAW,MAAM,kBAAkB,CAAC;AAC3C,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAE1C,MAAM,EACJ,KAAK,EAAE,CAAC,KAAK,CAAC,EACd,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAC/C,GAAG,IAAI,CACN;;;;;;;;;;;;CAYD,EACC;IACE,UAAU,EAAE,MAAM,CAAC,IAAI;IACvB,KAAK,EAAE;QACL,SAAS,EAAE;YACT,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,oBAAoB;YAC7B,IAAI,EAAE,QAAQ;SACf;QACD,MAAM,EAAE;YACN,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,EAAE;YACX,UAAU,EAAE,IAAI;YAChB,IAAI,EAAE,QAAQ;SACf;QACD,OAAO,EAAE;YACP,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,SAAS;SAChB;KACF;CACF,CACF,CAAC;AAEF,MAAM,MAAM,GAAG,IAAI,aAAa,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;AAE9C,MAAM,EAAE,GAAG,IAAI,WAAW,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AAE9C,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACnH,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,eAAe,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC;AAExE,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,MAAM,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;AACrE,MAAM,EAAE,CAAC,cAAc,EAAE,CAAC;AAC1B,MAAM,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;AACzD,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import Generator from '@hilla/generator-typescript-core/Generator.js';\nimport LoggerFactory from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport meow from 'meow';\nimport GeneratorIO from './GeneratorIO.js';\nimport { processInput } from './utils.js';\n\nconst {\n  input: [input],\n  flags: { outputDir, plugin: plugins, verbose },\n} = meow(\n  `\nUsage:\n  tsgen\n    (will read JSON from stdin)\n  tsgen <OpenAPI JSON string>\n  tsgen <OpenAPI file path>\n\nOptions:\n  -h, --help             Show this screen\n  -o, --output-dir       Output directory\n  -p, --plugin <path>    Use the plugin loadable by <path>.\n  --version              Show the app version\n`,\n  {\n    importMeta: import.meta,\n    flags: {\n      outputDir: {\n        alias: 'o',\n        default: 'frontend/generated',\n        type: 'string',\n      },\n      plugin: {\n        alias: 'p',\n        default: [],\n        isMultiple: true,\n        type: 'string',\n      },\n      verbose: {\n        alias: 'v',\n        type: 'boolean',\n      },\n    },\n  },\n);\n\nconst logger = new LoggerFactory({ verbose });\n\nconst io = new GeneratorIO(outputDir, logger);\n\nconst resolvedPlugins = await Promise.all(Array.from(new Set(plugins), (pluginPath) => io.loadPlugin(pluginPath)));\nconst generator = new Generator(resolvedPlugins, { logger, outputDir });\n\nconst files = await generator.process(await processInput(io, input));\nawait io.cleanOutputDir();\nawait io.createFileIndex(files.map((file) => file.name));\nawait Promise.all(files.map((file) => io.write(file)));\n"]}