import Plugin from '@hilla/generator-typescript-core/Plugin.js';
import { open } from 'fs/promises';
import { fileURLToPath } from 'url';
import ClientProcessor from './ClientProcessor.js';
export default class ClientPlugin extends Plugin {
    static CLIENT_FILE_NAME = 'connect-client.default';
    static CUSTOM_CLIENT_FILE_NAME = '../connect-client';
    get path() {
        return import.meta.url;
    }
    async execute({ sources, outputDir }) {
        // the client file is created only if a custom client file is not found
        if (!(outputDir && (await ClientPlugin.checkForCustomClientFile(outputDir)))) {
            const clientFile = new ClientProcessor(this.constructor.CLIENT_FILE_NAME, this).process();
            sources.push(clientFile);
        }
    }
    static async checkForCustomClientFile(path) {
        const dir = path && path.startsWith('file:') ? fileURLToPath(path) : path;
        try {
            return !!(dir && (await open(`${dir}/${ClientPlugin.CUSTOM_CLIENT_FILE_NAME}.ts`, 'r')));
        }
        catch (e) {
            return false;
        }
    }
    static async getClientFileName(path) {
        return (await ClientPlugin.checkForCustomClientFile(path))
            ? ClientPlugin.CUSTOM_CLIENT_FILE_NAME
            : ClientPlugin.CLIENT_FILE_NAME;
    }
}
//# sourceMappingURL=index.js.map