{"version":3,"file":"Validators.js","sourceRoot":"","sources":["src/Validators.ts"],"names":[],"mappings":"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","sourcesContent":["import isAfter from 'validator/es/lib/isAfter.js';\nimport isBefore from 'validator/es/lib/isBefore.js';\nimport isBoolean from 'validator/es/lib/isBoolean.js';\nimport isDecimal from 'validator/es/lib/isDecimal.js';\nimport isEmail from 'validator/es/lib/isEmail.js';\nimport isFloat from 'validator/es/lib/isFloat.js';\nimport isLength from 'validator/es/lib/isLength.js';\nimport isNumeric from 'validator/es/lib/isNumeric.js';\nimport matches from 'validator/es/lib/matches.js';\nimport toFloat from 'validator/es/lib/toFloat.js';\nimport type { Validator } from './Validation.js';\n\ninterface ValidatorAttributes {\n  message?: string;\n}\ninterface ValueNumberAttributes extends ValidatorAttributes {\n  value: number | string;\n}\ninterface DigitAttributes extends ValidatorAttributes {\n  integer: number;\n  fraction: number;\n}\ninterface SizeAttributes extends ValidatorAttributes {\n  min?: number;\n  max?: number;\n}\ninterface PatternAttributes extends ValidatorAttributes {\n  regexp: RegExp | string;\n}\ninterface DecimalAttributes extends ValueNumberAttributes {\n  inclusive?: boolean;\n}\n\nabstract class AbstractValidator<T> implements Validator<T> {\n  public message = 'invalid';\n\n  public impliesRequired = false;\n\n  public constructor(attrs?: ValidatorAttributes) {\n    if (attrs && attrs.message) {\n      this.message = attrs.message;\n    }\n  }\n\n  public abstract validate(value: T): boolean | Promise<boolean>;\n}\n\nexport class Required<T> extends AbstractValidator<T> {\n  public override impliesRequired = true;\n\n  public override validate(value: T) {\n    if (typeof value === 'string' || Array.isArray(value)) {\n      return value.length > 0;\n    }\n    if (typeof value === 'number') {\n      return Number.isFinite(value);\n    }\n    return value !== undefined;\n  }\n}\n\nfunction _asValidatorAttributes(attrs: ValueNumberAttributes | number | string | PatternAttributes | RegExp) {\n  return typeof attrs === 'object' ? attrs : {};\n}\n\nfunction _value(attrs: ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs.value : attrs;\n}\n\nabstract class NumberValidator<T> extends AbstractValidator<T> {\n  public override validate(value: T) {\n    return isNumeric(String(value));\n  }\n}\n\nexport class IsNumber extends NumberValidator<number | null | undefined> {\n  public optional: boolean;\n\n  public constructor(optional: boolean, attrs?: ValidatorAttributes) {\n    super({ message: 'must be a number', ...attrs });\n    this.optional = optional;\n  }\n\n  public override validate(value: number | null | undefined) {\n    return (this.optional && value == null) || super.validate(value);\n  }\n}\n\nabstract class ValueNumberValidator<T> extends NumberValidator<T> {\n  public value: number;\n\n  protected constructor(attrs: ValueNumberAttributes | number | string) {\n    super(_asValidatorAttributes(attrs));\n    const val = _value(attrs);\n    this.value = typeof val === 'string' ? parseFloat(val) : val;\n  }\n}\n\n// JSR380 equivalent (https://beanvalidation.org/2.0/spec/#builtinconstraints)\nexport class Email extends AbstractValidator<string> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a well-formed email address', ...attrs });\n  }\n\n  public override validate(value: string | null | undefined) {\n    return !value || isEmail(value);\n  }\n}\nexport class Null extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be null', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return value == null;\n  }\n}\nexport class NotNull extends Required<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be null', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return !new Null().validate(value);\n  }\n}\nexport class NotEmpty extends Required<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be empty', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return super.validate(value) && new NotNull().validate(value) && value.length > 0;\n  }\n}\nexport class NotBlank extends Required<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be blank', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return new NotEmpty().validate(value);\n  }\n}\nexport class AssertTrue extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be true', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return isBoolean(String(value)) && String(value) === 'true';\n  }\n}\nexport class AssertFalse extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be false', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return !new AssertTrue().validate(value);\n  }\n}\n\nfunction _asValueNumberAttributes(attrs: ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs : { value: attrs };\n}\n\nexport class Min extends ValueNumberValidator<any> {\n  public constructor(attrs: ValueNumberAttributes | number | string) {\n    super({\n      message: `must be greater than or equal to ${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n  }\n\n  public override validate(value: any) {\n    return super.validate(value) && isFloat(String(value), { min: this.value });\n  }\n}\nexport class Max extends ValueNumberValidator<any> {\n  public constructor(attrs: ValueNumberAttributes | number | string) {\n    super({\n      message: `must be less than or equal to ${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n  }\n\n  public override validate(value: any) {\n    return super.validate(value) && isFloat(String(value), { max: this.value });\n  }\n}\n\nfunction _inclusive(attrs: DecimalAttributes | string | number) {\n  return typeof attrs !== 'object' || attrs.inclusive !== false;\n}\n\nexport class DecimalMin extends ValueNumberValidator<any> {\n  public inclusive: boolean;\n\n  public constructor(attrs: DecimalAttributes | string | number) {\n    super({\n      message: `must be greater than ${_inclusive(attrs) ? 'or equal to ' : ''}${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n    this.inclusive = _inclusive(attrs);\n  }\n\n  public override validate(value: any) {\n    return super.validate(value) && isFloat(String(value), { [this.inclusive ? 'min' : 'gt']: this.value });\n  }\n}\nexport class DecimalMax extends ValueNumberValidator<any> {\n  public inclusive: boolean;\n\n  public constructor(attrs: DecimalAttributes | string | number) {\n    super({\n      message: `must be less than ${_inclusive(attrs) ? 'or equal to ' : ''}${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n    this.inclusive = _inclusive(attrs);\n  }\n\n  public override validate(value: any) {\n    return super.validate(value) && isFloat(String(value), { [this.inclusive ? 'max' : 'lt']: this.value });\n  }\n}\nexport class Negative extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be less than 0', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return toFloat(`${value}`) < 0;\n  }\n}\nexport class NegativeOrZero extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be less than or equal to 0', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return toFloat(`${value}`) <= 0;\n  }\n}\nexport class Positive extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be greater than 0', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return toFloat(`${value}`) > 0;\n  }\n}\nexport class PositiveOrZero extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be greater than or equal to 0', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return toFloat(`${value}`) >= 0;\n  }\n}\n\nfunction _min(attrs: SizeAttributes) {\n  return attrs.min || 0;\n}\n\nfunction _max(attrs: SizeAttributes) {\n  return attrs.max || Number.MAX_SAFE_INTEGER;\n}\n\nexport class Size extends AbstractValidator<string> {\n  public min: number;\n\n  public max: number;\n\n  public constructor(attrs: SizeAttributes = {}) {\n    super({ message: `size must be between ${_min(attrs)} and ${_max(attrs)}`, ...attrs });\n    this.min = _min(attrs);\n    this.max = _max(attrs);\n    if (this.min > 0) {\n      this.impliesRequired = true;\n    }\n  }\n\n  public override validate(value: string) {\n    if (this.min && this.min > 0 && !new Required().validate(value)) {\n      return false;\n    }\n    return isLength(value, { min: this.min, max: this.max });\n  }\n}\n\nexport class Digits extends AbstractValidator<string> {\n  public integer: number;\n\n  public fraction: number;\n\n  public constructor(attrs: DigitAttributes) {\n    super({\n      message: `numeric value out of bounds (<${attrs.integer} digits>.<${attrs.fraction} digits> expected)`,\n      ...attrs,\n    });\n    this.integer = attrs.integer;\n    this.fraction = attrs.fraction;\n  }\n\n  public override validate(value: any) {\n    return (\n      String(toFloat(`${value}`)).replace(/(.*)\\.\\d+/, '$1').length <= this.integer &&\n      isDecimal(`${value}`, { decimal_digits: `0,${this.fraction}` })\n    );\n  }\n}\n\nexport class Past extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a past date', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return isBefore(value);\n  }\n}\n/*\n  @PastOrPresent has no client-side implementation yet.\n  It would consider any input valid and let the server-side to do validation.\n  (It's not trivial to ensure the same granularity of _present_ as on the server-side:\n  year / month / day / minute).\n*/\n// export class PastOrPresent extends AbstractValidator<any> {\n//   constructor(attrs?: ValidatorAttributes) {\n//     super({ message: 'must be a date in the past or in the present', ...attrs });\n//   }\n//   validate() {\n//     return true;\n//   }\n// }\nexport class Future extends AbstractValidator<any> {\n  public constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a future date', ...attrs });\n  }\n\n  public override validate(value: any) {\n    return isAfter(value);\n  }\n}\n\n/*\n  @FutureOrPresent has no client-side implementation yet.\n  It would consider any input valid and let the server-side to do validation.\n  (It's not trivial to ensure the same granularity of _present_ as on the server-side:\n  year / month / day / minute).\n*/\n// export class FutureOrPresent extends AbstractValidator<any> {\n//   constructor(attrs?: ValidatorAttributes) {\n//     super({ message: 'must be a date in the present or in the future', ...attrs });\n//   }\n//   validate = () => true;\n// }\n\nfunction _regexp(attrs: PatternAttributes | string | RegExp) {\n  if (typeof attrs === 'string') {\n    return new RegExp(attrs, 'u');\n  }\n\n  if (attrs instanceof RegExp) {\n    return attrs;\n  }\n\n  if (typeof attrs.regexp === 'string') {\n    return new RegExp(attrs.regexp, 'u');\n  }\n\n  return attrs.regexp;\n}\n\nexport class Pattern extends AbstractValidator<string> {\n  public regexp: RegExp;\n\n  public constructor(attrs: PatternAttributes | string | RegExp) {\n    super({\n      message: `must match the following regular expression: ${_regexp(attrs)}`,\n      ..._asValidatorAttributes(attrs),\n    });\n    this.regexp = _regexp(attrs);\n  }\n\n  public override validate(value: any) {\n    return matches(value, this.regexp);\n  }\n}\n"]}