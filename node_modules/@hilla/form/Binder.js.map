{"version":3,"file":"Binder.js","sourceRoot":"","sources":["src/Binder.ts"],"names":[],"mappings":"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","sourcesContent":["// TODO: Fix dependency cycle\n\n// eslint-disable-next-line import/no-cycle\nimport { BinderNode } from './BinderNode.js';\n// eslint-disable-next-line import/no-cycle\nimport { _parent, AbstractModel, ModelConstructor } from './Models.js';\n// eslint-disable-next-line import/no-cycle\nimport {\n  InterpolateMessageCallback,\n  runValidator,\n  ServerValidator,\n  ValidationError,\n  Validator,\n  ValueError,\n} from './Validation.js';\n// eslint-disable-next-line import/no-cycle\nimport { FieldStrategy, getDefaultFieldStrategy } from './Field.js';\n\nconst _submitting = Symbol('submitting');\nconst _defaultValue = Symbol('defaultValue');\nconst _value = Symbol('value');\nconst _emptyValue = Symbol('emptyValue');\nconst _onChange = Symbol('onChange');\nconst _onSubmit = Symbol('onSubmit');\nconst _validations = Symbol('validations');\nconst _validating = Symbol('validating');\nconst _validationRequestSymbol = Symbol('validationRequest');\n\n/**\n * A Binder controls all aspects of a single form.\n * Typically it is used to get and set the form value,\n * access the form model, validate, reset, and submit the form.\n *\n * @param <T> is the type of the value that binds to a form\n * @param <M> is the type of the model that describes the structure of the value\n */\nexport class Binder<T, M extends AbstractModel<T>> extends BinderNode<T, M> {\n  private [_defaultValue]!: T; // Initialized in the `read()` method\n\n  private [_value]!: T; // Initialized in the `read()` method\n\n  private [_emptyValue]: T;\n\n  private [_submitting] = false;\n\n  private [_validating] = false;\n\n  private [_validationRequestSymbol]?: Promise<void>;\n\n  private [_onChange]?: (oldValue?: T) => void;\n\n  private [_onSubmit]?: (value: T) => Promise<any>;\n\n  private [_validations]: Map<AbstractModel<any>, Map<Validator<any>, Promise<ReadonlyArray<ValueError<any>>>>> =\n    new Map();\n\n  public static interpolateMessageCallback?: InterpolateMessageCallback<any>;\n\n  /**\n   *\n   * @param context The form view component instance to update.\n   * @param Model The constructor (the class reference) of the form model. The Binder instantiates the top-level model\n   * @param config The options object, which can be used to config the onChange and onSubmit callbacks.\n   *\n   * ```\n   * binder = new Binder(orderView, OrderModel);\n   * or\n   * binder = new Binder(orderView, OrderModel, {onSubmit: async (order) => {endpoint.save(order)}});\n   * ```\n   */\n  public constructor(public context: Element, Model: ModelConstructor<T, M>, config?: BinderConfiguration<T>) {\n    super(new Model({ value: undefined }, 'value', false));\n    this[_emptyValue] = (this.model[_parent] as { value: T }).value;\n    // @ts-ignore\n    this.model[_parent] = this;\n\n    if (typeof (context as any).requestUpdate === 'function') {\n      this[_onChange] = () => (context as any).requestUpdate();\n    }\n    this[_onChange] = config?.onChange || this[_onChange];\n    this[_onSubmit] = config?.onSubmit || this[_onSubmit];\n    this.read(this[_emptyValue]);\n  }\n\n  /**\n   * The initial value of the form, before any fields are edited by the user.\n   */\n  public override get defaultValue() {\n    return this[_defaultValue];\n  }\n\n  public override set defaultValue(newValue) {\n    this[_defaultValue] = newValue;\n  }\n\n  /**\n   * The current value of the form.\n   */\n  public override get value() {\n    return this[_value];\n  }\n\n  public override set value(newValue) {\n    if (newValue === this[_value]) {\n      return;\n    }\n\n    const oldValue = this[_value];\n    this[_value] = newValue;\n    this.update(oldValue);\n    this.updateValidation();\n  }\n\n  /**\n   * Read the given value into the form and clear validation errors\n   *\n   * @param value Sets the argument as the new default\n   * value before resetting, otherwise the previous default is used.\n   */\n  public read(value: T) {\n    this.defaultValue = value;\n    if (\n      // Skip when no value is set yet (e. g., invoked from constructor)\n      this.value &&\n      // Clear validation state, then proceed if update is needed\n      this.clearValidation() &&\n      // When value is dirty, another update is coming from invoking the value\n      // setter below, so we skip this one to prevent duplicate updates\n      this.value === value\n    ) {\n      this.update(this.value);\n    }\n\n    this.value = this.defaultValue;\n  }\n\n  /**\n   * Reset the form to the previous value\n   */\n  public reset() {\n    this.read(this[_defaultValue]);\n  }\n\n  /**\n   * Sets the form to empty value, as defined in the Model.\n   */\n  public clear() {\n    this.read(this[_emptyValue]);\n  }\n\n  /**\n   * Submit the current form value to a predefined\n   * onSubmit callback.\n   *\n   * It's a no-op if the onSubmit callback is undefined.\n   */\n  public async submit(): Promise<T | void> {\n    if (this[_onSubmit] !== undefined) {\n      return this.submitTo(this[_onSubmit]!);\n    }\n    return undefined;\n  }\n\n  /**\n   * Submit the current form value to callback\n   *\n   * @param endpointMethod the callback function\n   */\n  public async submitTo<V>(endpointMethod: (value: T) => Promise<V>): Promise<V> {\n    const errors = await this.validate();\n    if (errors.length) {\n      throw new ValidationError(errors);\n    }\n\n    this[_submitting] = true;\n    this.update(this.value);\n    try {\n      return await endpointMethod.call(this.context, this.value);\n    } catch (error: any) {\n      if (error.validationErrorData && error.validationErrorData.length) {\n        const valueErrors: Array<ValueError<any>> = [];\n        error.validationErrorData.forEach((data: any) => {\n          const res =\n            /Object of type '(.+)' has invalid property '(.+)' with value '(.+)', validation error: '(.+)'/.exec(\n              data.message,\n            );\n          const [property, value, message] = res ? res.splice(2) : [data.parameterName, undefined, data.message];\n          valueErrors.push({ property, value, validator: new ServerValidator(message), message });\n        });\n        this.setErrorsWithDescendants(valueErrors);\n        throw new ValidationError(valueErrors);\n      }\n\n      throw error;\n    } finally {\n      this[_submitting] = false;\n      this.defaultValue = this.value;\n      this.update(this.value);\n    }\n  }\n\n  public async requestValidation<NT, NM extends AbstractModel<NT>>(\n    model: NM,\n    validator: Validator<NT>,\n  ): Promise<ReadonlyArray<ValueError<NT>>> {\n    let modelValidations: Map<Validator<NT>, Promise<ReadonlyArray<ValueError<NT>>>>;\n    if (this[_validations].has(model)) {\n      modelValidations = this[_validations].get(model) as Map<Validator<NT>, Promise<ReadonlyArray<ValueError<NT>>>>;\n    } else {\n      modelValidations = new Map();\n      this[_validations].set(model, modelValidations);\n    }\n\n    await this.performValidation();\n\n    if (modelValidations.has(validator)) {\n      return modelValidations.get(validator) as Promise<ReadonlyArray<ValueError<NT>>>;\n    }\n\n    const promise = runValidator(model, validator, Binder.interpolateMessageCallback);\n    modelValidations.set(validator, promise);\n    const valueErrors = await promise;\n\n    modelValidations.delete(validator);\n    if (modelValidations.size === 0) {\n      this[_validations].delete(model);\n    }\n    if (this[_validations].size === 0) {\n      this.completeValidation();\n    }\n\n    return valueErrors;\n  }\n\n  /**\n   * Determines and returns the field directive strategy for the bound element.\n   * Override to customise the binding strategy for a component.\n   * The Binder extends BinderNode, see the inherited properties and methods below.\n   *\n   * @param elm the bound element\n   * @param model the bound model\n   */\n  public getFieldStrategy<T>(elm: any, model?: AbstractModel<T>): FieldStrategy {\n    return getDefaultFieldStrategy(elm, model);\n  }\n\n  /**\n   * Indicates the submitting status of the form.\n   * True if the form was submitted, but the submit promise is not resolved yet.\n   */\n  public get submitting() {\n    return this[_submitting];\n  }\n\n  /**\n   * Indicates the validating status of the form.\n   * True when there is an ongoing validation.\n   */\n  public get validating() {\n    return this[_validating];\n  }\n\n  protected performValidation(): Promise<void> | void {\n    if (!this[_validationRequestSymbol]) {\n      this[_validating] = true;\n      this[_validationRequestSymbol] = Promise.resolve().then(() => {\n        this[_validationRequestSymbol] = undefined;\n      });\n    }\n    return this[_validationRequestSymbol];\n  }\n\n  protected completeValidation() {\n    this[_validating] = false;\n  }\n\n  protected override update(oldValue: T) {\n    this[_onChange]?.call(this.context, oldValue);\n  }\n}\n\nexport interface BinderConfiguration<T> {\n  onChange?: (oldValue?: T) => void;\n  onSubmit?: (value: T) => Promise<T | void>;\n}\n"]}