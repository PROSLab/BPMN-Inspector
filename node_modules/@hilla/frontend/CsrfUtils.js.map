{"version":3,"file":"CsrfUtils.js","sourceRoot":"","sources":["src/CsrfUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAE7C,gBAAgB;AAChB,MAAM,CAAC,MAAM,kBAAkB,GAAG,cAAc,CAAC;AACjD,gBAAgB;AAChB,MAAM,CAAC,MAAM,uBAAuB,GAAG,WAAW,CAAC;AACnD,gBAAgB;AAChB,MAAM,CAAC,MAAM,uBAAuB,GAAG,YAAY,CAAC;AAEpD,SAAS,yBAAyB,CAAC,OAA+B;IAChE,IAAI,OAAO,EAAE;QACX,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC;QAC9B,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,WAAW,EAAE;YAChD,OAAO,KAAK,CAAC;SACd;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,gBAAgB;AAChB,SAAS,8BAA8B,CAAC,GAAa;IACnD,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAkB,2BAA2B,CAAC,CAAC;IACxF,OAAO,yBAAyB,CAAC,UAAU,CAAC,CAAC;AAC/C,CAAC;AAED,gBAAgB;AAChB,SAAS,6BAA6B,CAAC,GAAa;IAClD,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAkB,oBAAoB,CAAC,CAAC;IAChF,OAAO,yBAAyB,CAAC,SAAS,CAAC,CAAC;AAC9C,CAAC;AAED,gBAAgB;AAChB,MAAM,UAAU,iBAAiB,CAAC,GAAa;IAC7C,MAAM,UAAU,GAAG,8BAA8B,CAAC,GAAG,CAAC,CAAC;IACvD,IAAI,IAAI,GAAG,SAAS,CAAC,uBAAuB,CAAC,CAAC;IAC9C,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QAC9B,IAAI,GAAG,6BAA6B,CAAC,GAAG,CAAC,CAAC;KAC3C;IACD,MAAM,OAAO,GAA2B,EAAE,CAAC;IAC3C,IAAI,IAAI,IAAI,UAAU,EAAE;QACtB,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;QACrB,OAAO,CAAC,YAAY,GAAG,UAAU,CAAC;KACnC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,gBAAgB;AAChB,MAAM,UAAU,uCAAuC,CAAC,GAAa;IACnE,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACxC,MAAM,OAAO,GAA2B,EAAE,CAAC;IAC3C,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,YAAY,EAAE;QAC3C,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;KACjD;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,gBAAgB;AAChB,MAAM,UAAU,qCAAqC,CAAC,GAAa;IACjE,MAAM,OAAO,GAA2B,EAAE,CAAC;IAE3C,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACxC,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,YAAY,EAAE;QAC3C,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;KACjD;SAAM;QACL,OAAO,CAAC,kBAAkB,CAAC,GAAG,SAAS,CAAC,uBAAuB,CAAC,IAAI,EAAE,CAAC;KACxE;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { getCookie } from './CookieUtils.js';\n\n/** @internal */\nexport const VAADIN_CSRF_HEADER = 'X-CSRF-Token';\n/** @internal */\nexport const VAADIN_CSRF_COOKIE_NAME = 'csrfToken';\n/** @internal */\nexport const SPRING_CSRF_COOKIE_NAME = 'XSRF-TOKEN';\n\nfunction extractContentFromMetaTag(element: HTMLMetaElement | null): string | undefined {\n  if (element) {\n    const value = element.content;\n    if (value && value.toLowerCase() !== 'undefined') {\n      return value;\n    }\n  }\n  return undefined;\n}\n\n/** @internal */\nfunction getSpringCsrfHeaderFromMetaTag(doc: Document): string | undefined {\n  const csrfHeader = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf_header\"]');\n  return extractContentFromMetaTag(csrfHeader);\n}\n\n/** @internal */\nfunction getSpringCsrfTokenFromMetaTag(doc: Document): string | undefined {\n  const csrfToken = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf\"]');\n  return extractContentFromMetaTag(csrfToken);\n}\n\n/** @internal */\nexport function getSpringCsrfInfo(doc: Document): Record<string, string> {\n  const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);\n  let csrf = getCookie(SPRING_CSRF_COOKIE_NAME);\n  if (!csrf || csrf.length === 0) {\n    csrf = getSpringCsrfTokenFromMetaTag(doc);\n  }\n  const headers: Record<string, string> = {};\n  if (csrf && csrfHeader) {\n    headers._csrf = csrf;\n    headers._csrf_header = csrfHeader;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getSpringCsrfTokenHeadersForAuthRequest(doc: Document): Record<string, string> {\n  const csrfInfo = getSpringCsrfInfo(doc);\n  const headers: Record<string, string> = {};\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getCsrfTokenHeadersForEndpointRequest(doc: Document): Record<string, string> {\n  const headers: Record<string, string> = {};\n\n  const csrfInfo = getSpringCsrfInfo(doc);\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  } else {\n    headers[VAADIN_CSRF_HEADER] = getCookie(VAADIN_CSRF_COOKIE_NAME) || '';\n  }\n\n  return headers;\n}\n"]}