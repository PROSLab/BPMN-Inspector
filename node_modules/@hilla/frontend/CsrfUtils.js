import { getCookie } from './CookieUtils.js';
/** @internal */
export const VAADIN_CSRF_HEADER = 'X-CSRF-Token';
/** @internal */
export const VAADIN_CSRF_COOKIE_NAME = 'csrfToken';
/** @internal */
export const SPRING_CSRF_COOKIE_NAME = 'XSRF-TOKEN';
function extractContentFromMetaTag(element) {
    if (element) {
        const value = element.content;
        if (value && value.toLowerCase() !== 'undefined') {
            return value;
        }
    }
    return undefined;
}
/** @internal */
function getSpringCsrfHeaderFromMetaTag(doc) {
    const csrfHeader = doc.head.querySelector('meta[name="_csrf_header"]');
    return extractContentFromMetaTag(csrfHeader);
}
/** @internal */
function getSpringCsrfTokenFromMetaTag(doc) {
    const csrfToken = doc.head.querySelector('meta[name="_csrf"]');
    return extractContentFromMetaTag(csrfToken);
}
/** @internal */
export function getSpringCsrfInfo(doc) {
    const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);
    let csrf = getCookie(SPRING_CSRF_COOKIE_NAME);
    if (!csrf || csrf.length === 0) {
        csrf = getSpringCsrfTokenFromMetaTag(doc);
    }
    const headers = {};
    if (csrf && csrfHeader) {
        headers._csrf = csrf;
        headers._csrf_header = csrfHeader;
    }
    return headers;
}
/** @internal */
export function getSpringCsrfTokenHeadersForAuthRequest(doc) {
    const csrfInfo = getSpringCsrfInfo(doc);
    const headers = {};
    if (csrfInfo._csrf && csrfInfo._csrf_header) {
        headers[csrfInfo._csrf_header] = csrfInfo._csrf;
    }
    return headers;
}
/** @internal */
export function getCsrfTokenHeadersForEndpointRequest(doc) {
    const headers = {};
    const csrfInfo = getSpringCsrfInfo(doc);
    if (csrfInfo._csrf && csrfInfo._csrf_header) {
        headers[csrfInfo._csrf_header] = csrfInfo._csrf;
    }
    else {
        headers[VAADIN_CSRF_HEADER] = getCookie(VAADIN_CSRF_COOKIE_NAME) || '';
    }
    return headers;
}
//# sourceMappingURL=CsrfUtils.js.map