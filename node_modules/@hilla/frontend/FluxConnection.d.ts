import type { Subscription } from './Connect';
export declare enum State {
    ACTIVE = "active",
    INACTIVE = "inactive"
}
type ActiveEvent = CustomEvent<{
    active: boolean;
}>;
interface EventMap {
    'state-changed': ActiveEvent;
}
type ListenerType<T extends keyof EventMap> = ((this: FluxConnection, ev: EventMap[T]) => any) | {
    handleEvent(ev: EventMap[T]): void;
} | null;
/**
 * A representation of the underlying persistent network connection used for subscribing to Flux type endpoint methods.
 */
export declare class FluxConnection extends EventTarget {
    private nextId;
    private endpointInfos;
    private onNextCallbacks;
    private onCompleteCallbacks;
    private onErrorCallbacks;
    private socket;
    state: State;
    private pendingMessages;
    constructor();
    private connectWebsocket;
    private handleMessage;
    private removeSubscription;
    private sendPendingMessages;
    private send;
    /**
     * Subscribes to the flux returned by the given endpoint name + method name using the given parameters.
     *
     * @param endpointName the endpoint to connect to
     * @param methodName the method in the endpoint to connect to
     * @param parameters the parameters to use
     * @returns a subscription
     */
    subscribe(endpointName: string, methodName: string, parameters?: Array<any>): Subscription<any>;
}
export interface FluxConnection {
    addEventListener<T extends keyof EventMap>(type: T, listener: ListenerType<T>): void;
    removeEventListener<T extends keyof EventMap>(type: T, listener: ListenerType<T>): void;
}
export {};
//# sourceMappingURL=FluxConnection.d.ts.map