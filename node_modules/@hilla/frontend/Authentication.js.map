{"version":3,"file":"Authentication.js","sourceRoot":"","sources":["src/Authentication.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MiddlewareClass, MiddlewareContext, MiddlewareNext } from './Connect.js';\nimport { getSpringCsrfInfo, getSpringCsrfTokenHeadersForAuthRequest, VAADIN_CSRF_HEADER } from './CsrfUtils.js';\nimport { deleteCookie, removeTrailingSlashFromPath } from './CookieUtils.js';\n\nconst jwtCookieName = 'jwt.headerAndPayload';\n\nfunction getSpringCsrfTokenFromResponseBody(body: string): Record<string, string> {\n  const doc = new DOMParser().parseFromString(body, 'text/html');\n  return getSpringCsrfInfo(doc);\n}\n\nfunction clearSpringCsrfMetaTags() {\n  Array.from(document.head.querySelectorAll('meta[name=\"_csrf\"], meta[name=\"_csrf_header\"]')).forEach((el) =>\n    el.remove(),\n  );\n}\n\nfunction updateSpringCsrfMetaTags(springCsrfInfo: Record<string, string>) {\n  clearSpringCsrfMetaTags();\n  const headerNameMeta: HTMLMetaElement = document.createElement('meta');\n  headerNameMeta.name = '_csrf_header';\n  headerNameMeta.content = springCsrfInfo._csrf_header;\n  document.head.appendChild(headerNameMeta);\n  const tokenMeta: HTMLMetaElement = document.createElement('meta');\n  tokenMeta.name = '_csrf';\n  tokenMeta.content = springCsrfInfo._csrf;\n  document.head.appendChild(tokenMeta);\n}\n\nconst getVaadinCsrfTokenFromResponseBody = (body: string): string | undefined => {\n  const match = body.match(/window\\.Vaadin = \\{TypeScript: \\{\"csrfToken\":\"([0-9a-zA-Z\\\\-]{36})\"}};/i);\n  return match ? match[1] : undefined;\n};\n\nasync function updateCsrfTokensBasedOnResponse(response: Response): Promise<string | undefined> {\n  const responseText = await response.text();\n  const token = getVaadinCsrfTokenFromResponseBody(responseText);\n  const springCsrfTokenInfo = getSpringCsrfTokenFromResponseBody(responseText);\n  updateSpringCsrfMetaTags(springCsrfTokenInfo);\n\n  return token;\n}\n\nasync function doLogout(logoutUrl: string, headers: Record<string, string>) {\n  const response = await fetch(logoutUrl, { method: 'POST', headers });\n  if (!response.ok) {\n    throw new Error(`failed to logout with response ${response.status}`);\n  }\n\n  await updateCsrfTokensBasedOnResponse(response);\n}\n\nfunction deleteJWTCookie() {\n  const cookiePath = removeTrailingSlashFromPath(new URL(document.baseURI).pathname);\n  deleteCookie(jwtCookieName, { Path: cookiePath });\n}\n\nexport interface LoginResult {\n  error: boolean;\n  token?: string;\n  errorTitle?: string;\n  errorMessage?: string;\n  redirectUrl?: string;\n  defaultUrl?: string;\n}\n\nexport interface LoginOptions {\n  loginProcessingUrl?: string;\n}\n\nexport interface LogoutOptions {\n  logoutUrl?: string;\n}\n\n/**\n * A helper method for Spring Security based form login.\n * @param username\n * @param password\n * @param options defines additional options, e.g, the loginProcessingUrl etc.\n */\nexport async function login(username: string, password: string, options?: LoginOptions): Promise<LoginResult> {\n  try {\n    const data = new FormData();\n    data.append('username', username);\n    data.append('password', password);\n\n    const loginProcessingUrl = options && options.loginProcessingUrl ? options.loginProcessingUrl : 'login';\n    const headers = getSpringCsrfTokenHeadersForAuthRequest(document);\n    headers.source = 'typescript';\n    const response = await fetch(loginProcessingUrl, {\n      method: 'POST',\n      body: data,\n      headers,\n    });\n\n    // This code assumes that a VaadinSavedRequestAwareAuthenticationSuccessHandler is used on the server side,\n    // setting these header values based on the \"source=typescript\" header set above\n\n    const result = response.headers.get('Result');\n    const savedUrl = response.headers.get('Saved-url') || undefined;\n    const defaultUrl = response.headers.get('Default-url') || undefined;\n    const loginSuccessful = response.ok && result === 'success';\n\n    if (loginSuccessful) {\n      const vaadinCsrfToken = response.headers.get('Vaadin-CSRF') || undefined;\n\n      const springCsrfHeader = response.headers.get('Spring-CSRF-header') || undefined;\n      const springCsrfToken = response.headers.get('Spring-CSRF-token') || undefined;\n      if (springCsrfHeader && springCsrfToken) {\n        const springCsrfTokenInfo: Record<string, string> = {};\n        springCsrfTokenInfo._csrf = springCsrfToken;\n        springCsrfTokenInfo._csrf_header = springCsrfHeader;\n        updateSpringCsrfMetaTags(springCsrfTokenInfo);\n      }\n\n      return {\n        error: false,\n        token: vaadinCsrfToken,\n        redirectUrl: savedUrl,\n        defaultUrl,\n      };\n    }\n    return {\n      error: true,\n      errorTitle: 'Incorrect username or password.',\n      errorMessage: 'Check that you have entered the correct username and password and try again.',\n    };\n  } catch (e: any) {\n    return {\n      error: true,\n      errorTitle: e.name,\n      errorMessage: e.message,\n    };\n  }\n}\n\n/**\n * A helper method for Spring Security based form logout\n * @param options defines additional options, e.g, the logoutUrl.\n */\nexport async function logout(options?: LogoutOptions) {\n  // this assumes the default Spring Security logout configuration (handler URL)\n  const logoutUrl = options && options.logoutUrl ? options.logoutUrl : 'logout';\n  try {\n    const headers = getSpringCsrfTokenHeadersForAuthRequest(document);\n    await doLogout(logoutUrl, headers);\n  } catch {\n    try {\n      const response = await fetch('?nocache');\n      const responseText = await response.text();\n      const doc = new DOMParser().parseFromString(responseText, 'text/html');\n      const headers = getSpringCsrfTokenHeadersForAuthRequest(doc);\n      await doLogout(logoutUrl, headers);\n    } catch (error) {\n      // clear the token if the call fails\n      clearSpringCsrfMetaTags();\n      throw error;\n    }\n  } finally {\n    deleteJWTCookie();\n  }\n}\n\n/**\n * It defines what to do when it detects a session is invalid. E.g.,\n * show a login view.\n * It takes an <code>EndpointCallContinue</code> parameter, which can be\n * used to continue the endpoint call.\n */\nexport type OnInvalidSessionCallback = () => Promise<LoginResult>;\n\n/**\n * A helper class for handling invalid sessions during an endpoint call.\n * E.g., you can use this to show user a login page when the session has\n * expired.\n */\nexport class InvalidSessionMiddleware implements MiddlewareClass {\n  private readonly onInvalidSessionCallback: OnInvalidSessionCallback;\n\n  public constructor(onInvalidSessionCallback: OnInvalidSessionCallback) {\n    this.onInvalidSessionCallback = onInvalidSessionCallback;\n  }\n\n  public async invoke(context: MiddlewareContext, next: MiddlewareNext): Promise<Response> {\n    const clonedContext = { ...context };\n    clonedContext.request = context.request.clone();\n    const response = await next(context);\n    if (response.status === 401) {\n      const loginResult = await this.onInvalidSessionCallback();\n      if (loginResult.token) {\n        clonedContext.request.headers.set(VAADIN_CSRF_HEADER, loginResult.token);\n        return next(clonedContext);\n      }\n    }\n    return response;\n  }\n}\n"]}