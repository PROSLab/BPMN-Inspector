{"version":3,"file":"EntityModelProcessor.js","sourceRoot":"","sources":["src/EntityModelProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable symbol-description */\nimport {\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  decomposeSchema,\n  isComposedSchema,\n  isEmptyObject,\n  isEnumSchema,\n  isObjectSchema,\n  isReferenceSchema,\n  ObjectSchema,\n  ReferenceSchema,\n  Schema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport {\n  convertFullyQualifiedNameToRelativePath,\n  simplifyFullyQualifiedName,\n} from '@hilla/generator-typescript-core/utils.js';\nimport createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';\nimport DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';\nimport PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';\nimport { dirname } from 'path/posix';\nimport type { ClassDeclaration, ClassElement, Identifier, SourceFile, Statement } from 'typescript';\nimport ts from 'typescript';\nimport { ModelSchemaExpressionProcessor, ModelSchemaTypeProcessor } from './ModelSchemaProcessor.js';\nimport type { Context } from './utils.js';\nimport { importBuiltInFormModel } from './utils.js';\n\nexport type DependencyData = Readonly<{\n  id: Identifier;\n  path: string;\n}>;\n\nconst $dependencies = Symbol();\nconst $entity = Symbol();\nconst $fullyQualifiedName = Symbol();\nconst $model = Symbol();\nconst $processDeclaration = Symbol();\n\nexport abstract class EntityModelProcessor {\n  public static process(name: string, component: Schema, context: Context): SourceFile {\n    context.owner.logger.debug(`Processing model for entity: ${name}`);\n\n    const schema = isComposedSchema(component) ? decomposeSchema(component)[0] : component;\n\n    return isEnumSchema(schema)\n      ? new EntityEnumModelProcessor(name).process() // eslint-disable-line no-use-before-define\n      : new EntityClassModelProcessor(name, component, context).process(); // eslint-disable-line no-use-before-define\n  }\n\n  protected readonly [$dependencies]: DependencyManager;\n  protected readonly [$entity]: DependencyData;\n  protected readonly [$fullyQualifiedName]: string;\n  protected readonly [$model]: DependencyData;\n  readonly #sourcePaths = new PathManager({ extension: 'ts' });\n\n  protected constructor(name: string, shouldImportEntityAsType: boolean) {\n    this[$fullyQualifiedName] = name;\n\n    const entityName = simplifyFullyQualifiedName(name);\n    const entityPath = convertFullyQualifiedNameToRelativePath(name);\n\n    const modelName = `${entityName}Model`;\n    const modelPath = `${entityPath}Model`;\n    this[$dependencies] = new DependencyManager(new PathManager({ relativeTo: dirname(modelPath) }));\n\n    const { exports, imports, paths } = this[$dependencies];\n\n    this[$model] = {\n      id: exports.default.set(modelName),\n      path: modelPath,\n    };\n\n    this[$entity] = {\n      id: imports.default.add(paths.createRelativePath(entityPath), entityName, shouldImportEntityAsType),\n      path: entityPath,\n    };\n  }\n\n  public process(): SourceFile {\n    const declaration = this[$processDeclaration]();\n\n    const { imports, exports } = this[$dependencies];\n    const importStatements = imports.toCode();\n    const exportStatement = exports.toCode();\n\n    return createSourceFile(\n      [...importStatements, declaration, ...exportStatement].filter(Boolean) as readonly Statement[],\n      this.#sourcePaths.createRelativePath(this[$model].path),\n    );\n  }\n\n  protected abstract [$processDeclaration](): ClassDeclaration | undefined;\n}\n\nexport class EntityClassModelProcessor extends EntityModelProcessor {\n  readonly #component: Schema;\n  readonly #context: Context;\n  readonly #fullyQualifiedName: string;\n  readonly #getPropertyModelSymbol: Identifier;\n\n  public constructor(name: string, component: Schema, context: Context) {\n    super(name, true);\n\n    this.#component = component;\n    this.#context = context;\n    this.#fullyQualifiedName = name;\n\n    this.#getPropertyModelSymbol = this[$dependencies].imports.named.add('@hilla/form', '_getPropertyModel');\n  }\n\n  protected [$processDeclaration](): ClassDeclaration | undefined {\n    const { logger } = this.#context.owner;\n\n    let entitySchema = this.#component;\n    let parent;\n\n    if (isComposedSchema(this.#component)) {\n      const decomposed = decomposeSchema(this.#component);\n\n      if (decomposed.length > 2) {\n        logger.error(this.#component, `The schema for a class component ${this.#fullyQualifiedName} is broken.`);\n        return undefined;\n      }\n\n      const [parentSchema, childSchema] = decomposed;\n\n      if (!isReferenceSchema(parentSchema)) {\n        logger.error(parentSchema, 'Only reference schema allowed for parent class');\n        return undefined;\n      }\n\n      entitySchema = childSchema;\n      parent = this.#processParentClass(parentSchema);\n    } else {\n      parent = importBuiltInFormModel('ObjectModel', this[$dependencies]);\n    }\n\n    return this.#processModelClass(entitySchema, this[$entity].id, parent);\n  }\n\n  #processClassElements({ required, properties }: ObjectSchema): readonly ClassElement[] {\n    if (!properties) {\n      return [];\n    }\n\n    const requiredSet = new Set(required);\n    return Object.entries(properties).map(([name, schema]) => {\n      const type = new ModelSchemaTypeProcessor(schema, this[$dependencies]).process();\n      const args = new ModelSchemaExpressionProcessor(\n        schema,\n        this[$dependencies],\n        (_) => !requiredSet.has(name),\n      ).process();\n\n      return ts.factory.createGetAccessorDeclaration(\n        undefined,\n        undefined,\n        ts.factory.createIdentifier(name),\n        [],\n        type,\n        ts.factory.createBlock(\n          [\n            ts.factory.createReturnStatement(\n              ts.factory.createAsExpression(\n                ts.factory.createCallExpression(\n                  ts.factory.createElementAccessExpression(ts.factory.createThis(), this.#getPropertyModelSymbol),\n                  undefined,\n                  [\n                    ts.factory.createStringLiteral(name),\n                    type.typeName as Identifier,\n                    ts.factory.createArrayLiteralExpression(args),\n                  ],\n                ),\n                type,\n              ),\n            ),\n          ],\n          true,\n        ),\n      );\n    });\n  }\n\n  #processModelClass(schema: Schema, entity: Identifier, parent: Identifier): ClassDeclaration | undefined {\n    const { logger } = this.#context.owner;\n\n    if (!isObjectSchema(schema)) {\n      logger.error(schema, `Component is not an object: ${this.#fullyQualifiedName}`);\n      return undefined;\n    }\n\n    if (isEmptyObject(schema)) {\n      logger.warn(`Component has no properties: ${this.#fullyQualifiedName}`);\n    }\n\n    const typeT = ts.factory.createIdentifier('T');\n    const modelTypeParameters = ts.factory.createTypeParameterDeclaration(\n      undefined,\n      typeT,\n      ts.factory.createTypeReferenceNode(entity),\n      ts.factory.createTypeReferenceNode(entity),\n    );\n\n    const emptyValueElement = ts.factory.createPropertyDeclaration(\n      undefined,\n      [ts.factory.createModifier(ts.SyntaxKind.DeclareKeyword), ts.factory.createModifier(ts.SyntaxKind.StaticKeyword)],\n      'createEmptyValue',\n      undefined,\n      ts.factory.createFunctionTypeNode(undefined, [], ts.factory.createTypeReferenceNode(entity)),\n      undefined,\n    );\n\n    return ts.factory.createClassDeclaration(\n      undefined,\n      undefined,\n      this[$model].id,\n      [modelTypeParameters],\n      [\n        ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [\n          ts.factory.createExpressionWithTypeArguments(parent, [ts.factory.createTypeReferenceNode(typeT)]),\n        ]),\n      ],\n      [emptyValueElement, ...this.#processClassElements(schema)],\n    );\n  }\n\n  #processParentClass(schema: ReferenceSchema): Identifier {\n    const { imports, paths } = this[$dependencies];\n\n    const specifier = convertReferenceSchemaToSpecifier(schema);\n    const path = convertReferenceSchemaToPath(schema);\n    const modelPath = paths.createRelativePath(`${path}Model`);\n    const modelSpecifier = `${specifier}Model`;\n\n    return imports.default.add(modelPath, modelSpecifier, false);\n  }\n}\n\nexport class EntityEnumModelProcessor extends EntityModelProcessor {\n  public constructor(name: string) {\n    super(name, false);\n  }\n\n  protected [$processDeclaration](): ClassDeclaration {\n    const enumModel = importBuiltInFormModel('EnumModel', this[$dependencies]);\n    const enumPropertySymbol = this[$dependencies].imports.named.add('@hilla/form', '_enum');\n\n    return ts.factory.createClassDeclaration(\n      undefined,\n      undefined,\n      this[$model].id,\n      undefined,\n      [\n        ts.factory.createHeritageClause(ts.SyntaxKind.ExtendsKeyword, [\n          ts.factory.createExpressionWithTypeArguments(enumModel, [\n            ts.factory.createTypeQueryNode(this[$entity].id, undefined),\n          ]),\n        ]),\n      ],\n      [\n        ts.factory.createPropertyDeclaration(\n          undefined,\n          [ts.factory.createModifier(ts.SyntaxKind.ReadonlyKeyword)],\n          ts.factory.createComputedPropertyName(enumPropertySymbol),\n          undefined,\n          undefined,\n          this[$entity].id,\n        ),\n      ],\n    );\n  }\n}\n"]}