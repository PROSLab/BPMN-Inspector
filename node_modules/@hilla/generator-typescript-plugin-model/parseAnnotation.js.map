{"version":3,"file":"parseAnnotation.js","sourceRoot":"","sources":["src/parseAnnotation.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,kDAAkD,CAAC;AAG3E,MAAM,QAAQ,GAAiD,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;AAE5F,SAAS,cAAc,CAAC,aAAqB;IAC3C,IAAI,aAAa,IAAI,QAAQ,EAAE;QAC7B,OAAO,QAAQ,CAAC,aAAa,CAAC,CAAC;KAChC;IAED,IAAI,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAChE,OAAO,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAChF;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;IACrC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,WAAW,EAAE,KAAK,KAAK,EAAE;QAClE,OAAO,MAAM,CAAC;KACf;IAED,MAAM,IAAI,WAAW,CAAC,yCAAyC,aAAa,GAAG,CAAC,CAAC;AACnF,CAAC;AAED,SAAS,eAAe,CAAC,cAAsB;IAC7C,cAAc,GAAG,cAAc,CAAC,IAAI,EAAE,CAAC;IACvC,IAAI,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAClE,MAAM,SAAS,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrE,MAAM,UAAU,GAA8B,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE;YAC7F,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;YAC/C,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAkD,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC;KACnB;IAED,OAAO,EAAE,KAAK,EAAE,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC;AACnD,CAAC;AAED,MAAM,CAAC,OAAO,UAAU,eAAe,CAAC,cAAsB;IAC5D,MAAM,CAAC,EAAE,UAAU,EAAE,aAAa,CAAC,GAAG,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IACnF,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5B,MAAM,IAAI,WAAW,CAAC,8CAA8C,cAAc,GAAG,CAAC,CAAC;KACxF;IAED,IAAI,aAAa,KAAK,SAAS,IAAI,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9D,MAAM,UAAU,GAAG,eAAe,CAAC,aAAa,CAAC,CAAC;QAClD,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;KACnC;IAED,OAAO,EAAE,UAAU,EAAE,CAAC;AACxB,CAAC","sourcesContent":["import PluginError from '@hilla/generator-typescript-utils/PluginError.js';\nimport type { Annotation, AnnotationNamedAttributes, AnnotationPrimitiveAttribute } from './Annotation.js';\n\nconst keywords: Record<string, AnnotationPrimitiveAttribute> = { true: true, false: false };\n\nfunction parseAttribute(attributeText: string): AnnotationPrimitiveAttribute {\n  if (attributeText in keywords) {\n    return keywords[attributeText];\n  }\n\n  if (attributeText.startsWith('\"') && attributeText.endsWith('\"')) {\n    return attributeText.slice(1, attributeText.length - 1).replace(/\\\\\\\\/g, '\\\\');\n  }\n\n  const number = Number(attributeText);\n  if (!Number.isNaN(number) || attributeText.toLowerCase() === 'nan') {\n    return number;\n  }\n\n  throw new PluginError(`Unable to parse annotation attribute \"${attributeText}\"`);\n}\n\nfunction parseAttributes(attributesText: string): AnnotationNamedAttributes {\n  attributesText = attributesText.trim();\n  if (attributesText.startsWith('{') && attributesText.endsWith('}')) {\n    const namedList = attributesText.slice(1, attributesText.length - 1);\n    const attributes: AnnotationNamedAttributes = namedList.split(',').reduce((record, pairText) => {\n      const [key, valueText] = pairText.split(':');\n      record[key.trim()] = parseAttribute(valueText);\n      return record;\n    }, {} as Record<string, AnnotationPrimitiveAttribute>);\n    return attributes;\n  }\n\n  return { value: parseAttribute(attributesText) };\n}\n\nexport default function parseAnnotation(annotationText: string): Annotation {\n  const [, simpleName, argumentsText] = /^(\\w+)\\((.*)\\)$/.exec(annotationText) || [];\n  if (simpleName === undefined) {\n    throw new PluginError(`Unknown annotation format when processing \"${annotationText}\"`);\n  }\n\n  if (argumentsText !== undefined && argumentsText.trim() !== '') {\n    const attributes = parseAttributes(argumentsText);\n    return { simpleName, attributes };\n  }\n\n  return { simpleName };\n}\n"]}