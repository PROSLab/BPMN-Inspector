{"version":3,"file":"ModelSchemaProcessor.js","sourceRoot":"","sources":["src/ModelSchemaProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable symbol-description */\nimport {\n  ArraySchema,\n  BooleanSchema,\n  convertReferenceSchemaToPath,\n  convertReferenceSchemaToSpecifier,\n  decomposeSchema,\n  IntegerSchema,\n  isArraySchema,\n  isBooleanSchema,\n  isComposedSchema,\n  isIntegerSchema,\n  isMapSchema,\n  isNullableSchema,\n  isNumberSchema,\n  isReferenceSchema,\n  isStringSchema,\n  MapSchema,\n  NumberSchema,\n  ReferenceSchema,\n  Schema,\n  StringSchema,\n} from '@hilla/generator-typescript-core/Schema.js';\nimport type DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager';\nimport type { Expression, Identifier, TypeNode, TypeReferenceNode } from 'typescript';\nimport ts from 'typescript';\nimport {\n  AnnotatedSchema,\n  Annotation,\n  AnnotationNamedAttributes,\n  AnnotationPrimitiveAttribute,\n  isAnnotatedSchema,\n  isValidationConstrainedSchema,\n  ValidationConstrainedSchema,\n} from './Annotation.js';\nimport parseAnnotation from './parseAnnotation.js';\nimport { importBuiltInFormModel } from './utils.js';\n\nfunction convertAttribute(attribute: AnnotationPrimitiveAttribute): Expression {\n  switch (typeof attribute) {\n    case 'boolean':\n      return attribute ? ts.factory.createTrue() : ts.factory.createFalse();\n    case 'number':\n      return ts.factory.createNumericLiteral(attribute);\n    case 'string':\n      return ts.factory.createStringLiteral(attribute);\n    default:\n      return ts.factory.createOmittedExpression();\n  }\n}\n\nfunction convertNamedAttributes(attributes: AnnotationNamedAttributes): Expression {\n  const attributeEntries = Object.entries(attributes);\n  if (attributeEntries.length === 1 && attributeEntries[0][0] === 'value') {\n    return convertAttribute(attributeEntries[0][1]);\n  }\n\n  return ts.factory.createObjectLiteralExpression(\n    attributeEntries.map(([key, value]) => ts.factory.createPropertyAssignment(key, convertAttribute(value))),\n    false,\n  );\n}\n\nconst $dependencies = Symbol();\nconst $processArray = Symbol();\nconst $processRecord = Symbol();\nconst $processReference = Symbol();\nconst $processString = Symbol();\nconst $processNumber = Symbol();\nconst $processBoolean = Symbol();\nconst $processUnknown = Symbol();\nconst $originalSchema = Symbol();\nconst $schema = Symbol();\n\nexport type OptionalChecker = (schema: Schema) => boolean;\n\nexport abstract class ModelSchemaPartProcessor<T> {\n  readonly [$dependencies]: DependencyManager;\n  readonly [$originalSchema]: Schema;\n  readonly [$schema]: Schema;\n\n  constructor(schema: Schema, dependencies: DependencyManager) {\n    this[$dependencies] = dependencies;\n    this[$originalSchema] = schema;\n    this[$schema] = isComposedSchema(schema) ? decomposeSchema(schema)[0] : schema;\n  }\n\n  process(): T {\n    const schema = this[$schema];\n\n    if (isReferenceSchema(schema)) {\n      return this[$processReference](schema);\n    }\n\n    if (isArraySchema(schema)) {\n      return this[$processArray](schema);\n    }\n\n    if (isMapSchema(schema)) {\n      return this[$processRecord](schema);\n    }\n\n    if (isStringSchema(schema)) {\n      return this[$processString](schema);\n    }\n\n    if (isNumberSchema(schema) || isIntegerSchema(schema)) {\n      return this[$processNumber](schema);\n    }\n\n    if (isBooleanSchema(schema)) {\n      return this[$processBoolean](schema);\n    }\n\n    return this[$processUnknown](schema);\n  }\n\n  protected abstract [$processArray](schema: ArraySchema): T;\n  protected abstract [$processBoolean](schema: BooleanSchema): T;\n  protected abstract [$processNumber](schema: NumberSchema | IntegerSchema): T;\n  protected abstract [$processRecord](schema: MapSchema): T;\n  protected abstract [$processReference](schema: ReferenceSchema): T;\n  protected abstract [$processString](schema: StringSchema): T;\n  protected abstract [$processUnknown](schema: Schema): T;\n}\n\nclass ModelSchemaInternalTypeProcessor extends ModelSchemaPartProcessor<TypeNode> {\n  protected override [$processArray](schema: ArraySchema): TypeNode {\n    return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('ReadonlyArray'), [\n      new ModelSchemaInternalTypeProcessor(schema.items, this[$dependencies]).process(),\n    ]);\n  }\n\n  protected override [$processBoolean](_: BooleanSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.BooleanKeyword);\n  }\n\n  protected override [$processNumber](_: NumberSchema | IntegerSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword);\n  }\n\n  protected override [$processRecord]({ additionalProperties: props }: MapSchema): TypeNode {\n    const valueType =\n      typeof props === 'boolean'\n        ? ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)\n        : new ModelSchemaInternalTypeProcessor(props, this[$dependencies]).process();\n\n    return ts.factory.createTypeReferenceNode(ts.factory.createIdentifier('Record'), [\n      ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword),\n      valueType,\n    ]);\n  }\n\n  protected override [$processReference](schema: ReferenceSchema): TypeNode {\n    const { paths, imports } = this[$dependencies];\n    const typeName = convertReferenceSchemaToSpecifier(schema);\n    const typePath = paths.createRelativePath(convertReferenceSchemaToPath(schema));\n    return ts.factory.createTypeReferenceNode(\n      imports.default.getIdentifier(typePath) ?? imports.default.add(typePath, typeName, true),\n    );\n  }\n\n  protected override [$processString](_: StringSchema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword);\n  }\n\n  protected override [$processUnknown](_: Schema): TypeNode {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword);\n  }\n}\n\nclass ModelSchemaIdentifierProcessor extends ModelSchemaPartProcessor<Identifier> {\n  override [$processArray](_: ArraySchema): Identifier {\n    return importBuiltInFormModel('ArrayModel', this[$dependencies]);\n  }\n\n  override [$processBoolean](_: BooleanSchema): Identifier {\n    return importBuiltInFormModel('BooleanModel', this[$dependencies]);\n  }\n\n  override [$processNumber](_: NumberSchema | IntegerSchema): Identifier {\n    return importBuiltInFormModel('NumberModel', this[$dependencies]);\n  }\n\n  override [$processRecord](_: MapSchema): Identifier {\n    return importBuiltInFormModel('ObjectModel', this[$dependencies]);\n  }\n\n  override [$processReference](schema: ReferenceSchema): Identifier {\n    const { paths, imports } = this[$dependencies];\n\n    const name = `${convertReferenceSchemaToSpecifier(schema)}Model`;\n    const path = paths.createRelativePath(`${convertReferenceSchemaToPath(schema)}Model`);\n\n    return imports.default.getIdentifier(path) ?? imports.default.add(path, name);\n  }\n\n  override [$processString](_: StringSchema): Identifier {\n    return importBuiltInFormModel('StringModel', this[$dependencies]);\n  }\n\n  override [$processUnknown](_: Schema): Identifier {\n    return importBuiltInFormModel('ObjectModel', this[$dependencies]);\n  }\n}\n\nexport class ModelSchemaTypeProcessor extends ModelSchemaPartProcessor<TypeReferenceNode> {\n  readonly #id: ModelSchemaIdentifierProcessor;\n\n  constructor(schema: Schema, dependencies: DependencyManager) {\n    super(schema, dependencies);\n    this.#id = new ModelSchemaIdentifierProcessor(schema, dependencies);\n  }\n\n  protected override [$processArray](schema: ArraySchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processArray](schema), [\n      new ModelSchemaInternalTypeProcessor(schema.items, this[$dependencies]).process(),\n      new ModelSchemaTypeProcessor(schema.items, this[$dependencies]).process(),\n    ]);\n  }\n\n  protected override [$processBoolean](schema: BooleanSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processBoolean](schema));\n  }\n\n  protected override [$processNumber](schema: NumberSchema | IntegerSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processNumber](schema));\n  }\n\n  protected override [$processRecord](schema: MapSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processRecord](schema), [\n      new ModelSchemaInternalTypeProcessor(schema, this[$dependencies]).process(),\n    ]);\n  }\n\n  protected override [$processReference](schema: ReferenceSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processReference](schema));\n  }\n\n  protected override [$processString](schema: StringSchema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processString](schema));\n  }\n\n  protected override [$processUnknown](schema: Schema): TypeReferenceNode {\n    return ts.factory.createTypeReferenceNode(this.#id[$processUnknown](schema), [\n      ts.factory.createKeywordTypeNode(ts.SyntaxKind.UnknownKeyword),\n    ]);\n  }\n}\n\nexport class ModelSchemaExpressionProcessor extends ModelSchemaPartProcessor<readonly Expression[]> {\n  readonly #checkOptional: OptionalChecker;\n\n  constructor(schema: Schema, dependencies: DependencyManager, checkOptional: OptionalChecker = isNullableSchema) {\n    super(schema, dependencies);\n    this.#checkOptional = checkOptional;\n  }\n\n  public override process(): readonly ts.Expression[] {\n    const schema = this[$schema];\n\n    let result = super.process();\n\n    if (isAnnotatedSchema(schema)) {\n      result = [...result, ...this.#getValidatorsFromAnnotations(schema)];\n    }\n\n    if (isValidationConstrainedSchema(schema)) {\n      result = [...result, ...this.#getValidatorsFromValidationConstraints(schema)];\n    }\n\n    return [this.#checkOptional(this[$originalSchema]) ? ts.factory.createTrue() : ts.factory.createFalse(), ...result];\n  }\n\n  protected override [$processArray](schema: ArraySchema): readonly Expression[] {\n    return [\n      new ModelSchemaIdentifierProcessor(schema.items, this[$dependencies]).process(),\n      ts.factory.createArrayLiteralExpression(\n        new ModelSchemaExpressionProcessor(schema.items, this[$dependencies]).process(),\n      ),\n    ];\n  }\n\n  protected override [$processBoolean](_: BooleanSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processNumber](_: NumberSchema | IntegerSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processRecord](_: MapSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processReference](_: ReferenceSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processString](_: StringSchema): readonly Expression[] {\n    return [];\n  }\n\n  protected override [$processUnknown](_: Schema): readonly Expression[] {\n    return [];\n  }\n\n  #getValidator = (annotation: Annotation): Expression =>\n    ts.factory.createNewExpression(\n      importBuiltInFormModel(annotation.simpleName, this[$dependencies]),\n      undefined,\n      annotation.attributes !== undefined ? [convertNamedAttributes(annotation.attributes)] : [],\n    );\n\n  #getValidatorsFromAnnotations(schema: AnnotatedSchema): readonly Expression[] {\n    return schema['x-annotations'].map(parseAnnotation).map(this.#getValidator);\n  }\n\n  #getValidatorsFromValidationConstraints(schema: ValidationConstrainedSchema): readonly Expression[] {\n    return schema['x-validation-constraints'].map(this.#getValidator);\n  }\n}\n"]}