import Plugin from '@hilla/generator-typescript-core/Plugin.js';
import { EntityModelProcessor } from './EntityModelProcessor.js';
export var ModelPluginSourceType;
(function (ModelPluginSourceType) {
    ModelPluginSourceType["Model"] = "model";
})(ModelPluginSourceType || (ModelPluginSourceType = {}));
export default class ModelPlugin extends Plugin {
    static MODEL_PLUGIN_FILE_TAGS = 'MODEL_PLUGIN_FILE_TAGS';
    #tags = new WeakMap();
    get path() {
        return import.meta.url;
    }
    async execute(storage) {
        const files = this.#processEntities(storage.api.components?.schemas);
        files.forEach((file) => this.#tags.set(file, ModelPluginSourceType.Model));
        storage.sources.push(...files);
        storage.pluginStorage.set(this.constructor.MODEL_PLUGIN_FILE_TAGS, this.#tags);
    }
    #processEntities(schemas) {
        this.logger.debug('Processing entities');
        if (!schemas) {
            return [];
        }
        const ctx = {
            owner: this,
        };
        return schemas
            ? Object.entries(schemas).map(([name, component]) => EntityModelProcessor.process(name, component, ctx))
            : [];
    }
}
//# sourceMappingURL=index.js.map