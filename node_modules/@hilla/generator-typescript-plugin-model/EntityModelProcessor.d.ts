import { Schema } from '@hilla/generator-typescript-core/Schema.js';
import DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';
import type { ClassDeclaration, Identifier, SourceFile } from 'typescript';
import type { Context } from './utils.js';
export type DependencyData = Readonly<{
    id: Identifier;
    path: string;
}>;
declare const $dependencies: unique symbol;
declare const $entity: unique symbol;
declare const $fullyQualifiedName: unique symbol;
declare const $model: unique symbol;
declare const $processDeclaration: unique symbol;
export declare abstract class EntityModelProcessor {
    #private;
    static process(name: string, component: Schema, context: Context): SourceFile;
    protected readonly [$dependencies]: DependencyManager;
    protected readonly [$entity]: DependencyData;
    protected readonly [$fullyQualifiedName]: string;
    protected readonly [$model]: DependencyData;
    protected constructor(name: string, shouldImportEntityAsType: boolean);
    process(): SourceFile;
    protected abstract [$processDeclaration](): ClassDeclaration | undefined;
}
export declare class EntityClassModelProcessor extends EntityModelProcessor {
    #private;
    constructor(name: string, component: Schema, context: Context);
    protected [$processDeclaration](): ClassDeclaration | undefined;
}
export declare class EntityEnumModelProcessor extends EntityModelProcessor {
    constructor(name: string);
    protected [$processDeclaration](): ClassDeclaration;
}
export {};
//# sourceMappingURL=EntityModelProcessor.d.ts.map