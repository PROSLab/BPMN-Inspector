import Plugin from '@hilla/generator-typescript-core/Plugin.js';
import PushProcessor from './PushProcessor.js';
const classesToReplace = [
    'dev.hilla.runtime.transfertypes.Flux',
    'dev.hilla.runtime.transfertypes.EndpointSubscription',
];
export default class PushPlugin extends Plugin {
    /**
     * Collects methods that must be patched by checking their `x-class-name` value
     */
    static #collectPatchableMethods(paths) {
        return Object.entries(paths).reduce((acc, [key, path]) => {
            const response = path?.post?.responses[200];
            const schema = response?.content?.['application/json']?.schema;
            const className = schema?.['x-class-name'];
            if (className && classesToReplace.includes(className)) {
                const [, endpoint, method] = key.split('/');
                if (acc.has(endpoint)) {
                    acc.get(endpoint).push(method);
                }
                else {
                    acc.set(endpoint, [method]);
                }
            }
            return acc;
        }, new Map());
    }
    get path() {
        return import.meta.url;
    }
    async execute(storage) {
        const { api, sources } = storage;
        const endpointMethodMap = this.constructor.#collectPatchableMethods(api.paths);
        for (let i = 0; i < sources.length; i++) {
            const { fileName } = sources[i];
            const endpoint = fileName.substring(0, fileName.indexOf('.ts'));
            if (endpointMethodMap.has(endpoint)) {
                sources[i] = new PushProcessor(sources[i], endpointMethodMap.get(endpoint)).process();
            }
        }
    }
}
//# sourceMappingURL=index.js.map