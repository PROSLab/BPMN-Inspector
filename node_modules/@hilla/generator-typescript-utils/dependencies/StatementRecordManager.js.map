{"version":3,"file":"StatementRecordManager.js","sourceRoot":"","sources":["../src/dependencies/StatementRecordManager.ts"],"names":[],"mappings":"AAKA,MAAM,CAAC,OAAO,OAAgB,sBAAsB;IAC3C,MAAM,CAAC,gBAAgB,CAC5B,QAAuB;QAEvB,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE;YAC1B,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBACnD,OAAO,CAAC,CAAC;aACV;YAED,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBACnD,OAAO,CAAC,CAAC,CAAC;aACX;YAED,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC,CAAC;IACJ,CAAC;IAGQ,SAAS,CAAgB;IAElC,YAAmB,QAAuB;QACxC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC5B,CAAC;IAIM,MAAM;QACX,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAC7C,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAEhE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC;IACnD,CAAC;CAGF","sourcesContent":["import type { Statement } from 'typescript';\nimport type CodeConvertable from './CodeConvertable.js';\n\nexport type StatementRecord<T extends Statement> = readonly [path: string, declaration: T];\n\nexport default abstract class StatementRecordManager<T extends Statement> implements CodeConvertable<readonly T[]> {\n  public static createComparator<T extends Statement>(\n    collator: Intl.Collator,\n  ): (recordA: StatementRecord<T>, recordB: StatementRecord<T>) => number {\n    return ([pathA], [pathB]) => {\n      if (pathA.startsWith('.') && !pathB.startsWith('.')) {\n        return 1;\n      }\n\n      if (!pathA.startsWith('.') && pathB.startsWith('.')) {\n        return -1;\n      }\n\n      return collator.compare(pathA, pathB);\n    };\n  }\n\n  public declare ['constructor']: typeof StatementRecordManager;\n  readonly #collator: Intl.Collator;\n\n  public constructor(collator: Intl.Collator) {\n    this.#collator = collator;\n  }\n\n  public abstract statementRecords(): IterableIterator<StatementRecord<T>>;\n\n  public toCode(): readonly T[] {\n    const records = [...this.statementRecords()];\n    records.sort(this.constructor.createComparator(this.#collator));\n\n    return records.map(([, statement]) => statement);\n  }\n\n  public abstract clear(): void;\n}\n"]}