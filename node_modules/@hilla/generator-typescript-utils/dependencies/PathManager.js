import { posix } from 'path';
export default class PathManager {
    #options;
    constructor(options) {
        let extension;
        if (options?.extension) {
            extension = options.extension.startsWith('.') ? options.extension : `.${options.extension}`;
        }
        this.#options = {
            ...options,
            extension,
            relativeTo: options?.relativeTo ?? '.',
        };
    }
    get aliasRoot() {
        return this.#options.aliasRoot;
    }
    createBareModulePath(path, isFile = false) {
        const { extension } = this.#options;
        if (extension && isFile) {
            return `${path}.${extension}`;
        }
        return path;
    }
    createRelativePath(path, relativeTo = this.#options.relativeTo) {
        const { extension } = this.#options;
        let result = path;
        if (extension && !path.endsWith(extension)) {
            result = `${result}${extension}`;
        }
        result = posix.relative(relativeTo, result);
        return result.startsWith('.') ? result : `./${result}`;
    }
    createTSAliasModulePath(path, root = this.#options.aliasRoot) {
        return root ? `${root}/${path}` : path;
    }
}
//# sourceMappingURL=PathManager.js.map