import type { Statement } from 'typescript';
import type CodeConvertable from './CodeConvertable.js';
export type StatementRecord<T extends Statement> = readonly [path: string, declaration: T];
export default abstract class StatementRecordManager<T extends Statement> implements CodeConvertable<readonly T[]> {
    #private;
    static createComparator<T extends Statement>(collator: Intl.Collator): (recordA: StatementRecord<T>, recordB: StatementRecord<T>) => number;
    ['constructor']: typeof StatementRecordManager;
    constructor(collator: Intl.Collator);
    abstract statementRecords(): IterableIterator<StatementRecord<T>>;
    toCode(): readonly T[];
    abstract clear(): void;
}
//# sourceMappingURL=StatementRecordManager.d.ts.map