{"version":3,"file":"ImportManager.js","sourceRoot":"","sources":["../src/dependencies/ImportManager.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Identifier, ImportDeclaration, Statement } from 'typescript';\nimport ts, { NamedImports } from 'typescript';\nimport createFullyUniqueIdentifier from '../createFullyUniqueIdentifier.js';\nimport type CodeConvertable from './CodeConvertable.js';\nimport StatementRecordManager, { StatementRecord } from './StatementRecordManager.js';\nimport type { DependencyRecord } from './utils.js';\nimport { createDependencyRecord } from './utils.js';\n\nexport class NamedImportManager extends StatementRecordManager<ImportDeclaration> {\n  readonly #collator: Intl.Collator;\n  readonly #map = new Map<string, Map<string, DependencyRecord>>();\n\n  public constructor(collator: Intl.Collator) {\n    super(collator);\n    this.#collator = collator;\n  }\n\n  public add(path: string, specifier: string, isType?: boolean, uniqueId?: Identifier): Identifier {\n    const record = createDependencyRecord(uniqueId ?? createFullyUniqueIdentifier(specifier), isType);\n\n    if (this.#map.has(path)) {\n      this.#map.get(path)!.set(specifier, record);\n    } else {\n      this.#map.set(path, new Map([[specifier, record]]));\n    }\n\n    return record.id;\n  }\n\n  public override clear() {\n    this.#map.clear();\n  }\n\n  public getIdentifier(path: string, specifier: string): Identifier | undefined {\n    return this.#map.get(path)?.get(specifier)?.id;\n  }\n\n  public *identifiers(): IterableIterator<readonly [path: string, specifier: string, id: Identifier, isType: boolean]> {\n    for (const [path, specifiers] of this.#map) {\n      for (const [specifier, { id, isType }] of specifiers) {\n        yield [path, specifier, id, isType];\n      }\n    }\n  }\n\n  public isType(path: string, specifier: string): boolean | undefined {\n    return this.#map.get(path)?.get(specifier)?.isType;\n  }\n\n  public paths(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  public *specifiers(): IterableIterator<readonly [path: string, specifier: string]> {\n    for (const [path, specifiers] of this.#map) {\n      for (const specifier of specifiers.keys()) {\n        yield [path, specifier];\n      }\n    }\n  }\n\n  public override *statementRecords(): IterableIterator<StatementRecord<ImportDeclaration>> {\n    for (const [path, specifiers] of this.#map) {\n      const names = [...specifiers.keys()];\n      names.sort(this.#collator.compare);\n\n      yield [\n        path,\n        ts.factory.createImportDeclaration(\n          undefined,\n          undefined,\n          ts.factory.createImportClause(\n            false,\n            undefined,\n            ts.factory.createNamedImports(\n              names.map((name) => {\n                const { id, isType } = specifiers.get(name)!;\n                return ts.factory.createImportSpecifier(isType, ts.factory.createIdentifier(name), id);\n              }),\n            ),\n          ),\n          ts.factory.createStringLiteral(path),\n        ),\n      ];\n    }\n  }\n}\n\nexport class NamespaceImportManager extends StatementRecordManager<ImportDeclaration> {\n  readonly #map = new Map<string, Identifier>();\n\n  public add(path: string, name: string, uniqueId?: Identifier): Identifier {\n    const id = uniqueId ?? createFullyUniqueIdentifier(name);\n    this.#map.set(path, id);\n    return id;\n  }\n\n  public override clear() {\n    this.#map.clear();\n  }\n\n  public getIdentifier(path: string): Identifier | undefined {\n    return this.#map.get(path);\n  }\n\n  public *identifiers(): IterableIterator<Identifier> {\n    for (const id of this.#map.values()) {\n      yield id;\n    }\n  }\n\n  public paths(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  public override *statementRecords(): IterableIterator<StatementRecord<ImportDeclaration>> {\n    for (const [path, id] of this.#map) {\n      yield [\n        path,\n        ts.factory.createImportDeclaration(\n          undefined,\n          undefined,\n          ts.factory.createImportClause(false, undefined, ts.factory.createNamespaceImport(id)),\n          ts.factory.createStringLiteral(path),\n        ),\n      ];\n    }\n  }\n}\n\nexport class DefaultImportManager extends StatementRecordManager<ImportDeclaration> {\n  readonly #map = new Map<string, DependencyRecord>();\n\n  public add(path: string, name: string, isType?: boolean, uniqueId?: Identifier): Identifier {\n    const id = uniqueId ?? createFullyUniqueIdentifier(name);\n    this.#map.set(path, createDependencyRecord(id, isType));\n    return id;\n  }\n\n  public getIdentifier(path: string): Identifier | undefined {\n    return this.#map.get(path)?.id;\n  }\n\n  public override clear() {\n    this.#map.clear();\n  }\n\n  public *identifiers(): IterableIterator<readonly [id: Identifier, isType: boolean]> {\n    for (const { id, isType } of this.#map.values()) {\n      yield [id, isType];\n    }\n  }\n\n  public isType(path: string): boolean | undefined {\n    return this.#map.get(path)?.isType;\n  }\n\n  public paths(): IterableIterator<string> {\n    return this.#map.keys();\n  }\n\n  public override *statementRecords(): IterableIterator<StatementRecord<ImportDeclaration>> {\n    for (const [path, { id, isType }] of this.#map) {\n      yield [\n        path,\n        ts.factory.createImportDeclaration(\n          undefined,\n          undefined,\n          ts.factory.createImportClause(isType, id, undefined),\n          ts.factory.createStringLiteral(path),\n        ),\n      ];\n    }\n  }\n}\n\nexport default class ImportManager implements CodeConvertable<readonly Statement[]> {\n  public readonly default: DefaultImportManager;\n  public readonly named: NamedImportManager;\n  public readonly namespace: NamespaceImportManager;\n\n  readonly #collator: Intl.Collator;\n\n  public constructor(collator: Intl.Collator) {\n    this.default = new DefaultImportManager(collator);\n    this.named = new NamedImportManager(collator);\n    this.namespace = new NamespaceImportManager(collator);\n    this.#collator = collator;\n  }\n\n  public toCode(): readonly Statement[] {\n    const records = [\n      ...this.default.statementRecords(),\n      ...this.named.statementRecords(),\n      ...this.namespace.statementRecords(),\n    ];\n    records.sort(StatementRecordManager.createComparator(this.#collator));\n\n    return records.map(([, statement]) => statement);\n  }\n\n  public fromCode(source: ts.SourceFile) {\n    this.default.clear();\n    this.named.clear();\n    this.namespace.clear();\n\n    const imports = source.statements.filter((statement): statement is ImportDeclaration =>\n      ts.isImportDeclaration(statement),\n    );\n\n    for (const { importClause, moduleSpecifier } of imports) {\n      if (!importClause) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      const { name, namedBindings } = importClause;\n      const path = (moduleSpecifier as ts.StringLiteral).text;\n\n      if (namedBindings) {\n        if (ts.isNamespaceImport(namedBindings)) {\n          this.namespace.add(path, namedBindings.name.text, namedBindings.name);\n        } else {\n          for (const { name: specifier, isTypeOnly } of (namedBindings as NamedImports).elements) {\n            this.named.add(path, specifier.text, isTypeOnly, specifier);\n          }\n        }\n      } else if (name) {\n        this.default.add(path, name.text, importClause.isTypeOnly, name);\n      }\n    }\n  }\n}\n"]}