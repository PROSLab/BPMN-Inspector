import ts from 'typescript';
import createFullyUniqueIdentifier from '../createFullyUniqueIdentifier.js';
import StatementRecordManager from './StatementRecordManager.js';
import { createDependencyRecord } from './utils.js';
export class NamedExportManager {
    #collator;
    #map = new Map();
    constructor(collator) {
        this.#collator = collator;
    }
    add(name, isType, uniqueId) {
        const id = uniqueId ?? createFullyUniqueIdentifier(name);
        this.#map.set(name, createDependencyRecord(id, isType));
        return id;
    }
    getIdentifier(name) {
        return this.#map.get(name)?.id;
    }
    *identifiers() {
        for (const { id, isType } of this.#map.values()) {
            yield [id, isType];
        }
    }
    isType(name) {
        return this.#map.get(name)?.isType;
    }
    names() {
        return this.#map.keys();
    }
    toCode() {
        if (this.#map.size === 0) {
            return undefined;
        }
        const names = [...this.#map.keys()];
        names.sort(this.#collator.compare);
        return ts.factory.createExportDeclaration(undefined, undefined, false, ts.factory.createNamedExports(names.map((name) => {
            const { id, isType } = this.#map.get(name);
            return ts.factory.createExportSpecifier(isType, id, ts.factory.createIdentifier(name));
        })), undefined);
    }
}
export class NamespaceExportManager extends StatementRecordManager {
    #map = new Map();
    addCombined(path, name, uniqueId) {
        const id = uniqueId ?? createFullyUniqueIdentifier(name);
        this.#map.set(path, id);
        return id;
    }
    addSpread(path) {
        this.#map.set(path, null);
    }
    clear() {
        this.#map.clear();
    }
    getIdentifier(path) {
        return this.#map.get(path);
    }
    identifiers() {
        return this.#map.values();
    }
    isCombined(path) {
        return this.#map.has(path) ? this.#map.get(path) !== null : undefined;
    }
    isSpread(path) {
        return this.#map.has(path) ? this.#map.get(path) === null : undefined;
    }
    paths() {
        return this.#map.keys();
    }
    *statementRecords() {
        for (const [path, id] of this.#map) {
            yield [
                path,
                ts.factory.createExportDeclaration(undefined, undefined, false, id !== null ? ts.factory.createNamespaceExport(id) : undefined, ts.factory.createStringLiteral(path)),
            ];
        }
    }
}
export class DefaultExportManager {
    #id;
    set(id) {
        this.#id = typeof id === 'string' ? ts.factory.createIdentifier(id) : id;
        return this.#id;
    }
    toCode() {
        return this.#id ? ts.factory.createExportAssignment(undefined, undefined, undefined, this.#id) : undefined;
    }
}
export default class ExportManager {
    default = new DefaultExportManager();
    named;
    namespace;
    constructor(collator) {
        this.named = new NamedExportManager(collator);
        this.namespace = new NamespaceExportManager(collator);
    }
    toCode() {
        const defaultStatement = this.default.toCode();
        const namedStatement = this.named.toCode();
        const namespaceStatements = this.namespace.toCode();
        const result = [];
        if (namedStatement) {
            result.push(namedStatement);
        }
        if (namespaceStatements) {
            result.push(...namespaceStatements);
        }
        if (defaultStatement) {
            result.push(defaultStatement);
        }
        return result;
    }
}
//# sourceMappingURL=ExportManager.js.map