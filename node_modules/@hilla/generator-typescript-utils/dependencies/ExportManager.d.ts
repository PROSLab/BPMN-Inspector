import { ExportAssignment, ExportDeclaration, Identifier, Statement } from 'typescript';
import type CodeConvertable from './CodeConvertable.js';
import StatementRecordManager, { StatementRecord } from './StatementRecordManager.js';
export declare class NamedExportManager implements CodeConvertable<ExportDeclaration | undefined> {
    #private;
    constructor(collator: Intl.Collator);
    add(name: string, isType?: boolean, uniqueId?: Identifier): Identifier;
    getIdentifier(name: string): Identifier | undefined;
    identifiers(): IterableIterator<readonly [id: Identifier, isType: boolean]>;
    isType(name: string): boolean | undefined;
    names(): IterableIterator<string>;
    toCode(): ExportDeclaration | undefined;
}
export declare class NamespaceExportManager extends StatementRecordManager<ExportDeclaration> {
    #private;
    addCombined(path: string, name: string, uniqueId?: Identifier): Identifier;
    addSpread(path: string): void;
    clear(): void;
    getIdentifier(path: string): Identifier | null | undefined;
    identifiers(): IterableIterator<Identifier | null>;
    isCombined(path: string): boolean | undefined;
    isSpread(path: string): boolean | undefined;
    paths(): IterableIterator<string>;
    statementRecords(): IterableIterator<StatementRecord<ExportDeclaration>>;
}
export declare class DefaultExportManager implements CodeConvertable<ExportAssignment | undefined> {
    #private;
    set(id: Identifier | string): Identifier;
    toCode(): ExportAssignment | undefined;
}
export default class ExportManager implements CodeConvertable<readonly Statement[]> {
    readonly default: DefaultExportManager;
    readonly named: NamedExportManager;
    readonly namespace: NamespaceExportManager;
    constructor(collator: Intl.Collator);
    toCode(): readonly Statement[];
}
//# sourceMappingURL=ExportManager.d.ts.map