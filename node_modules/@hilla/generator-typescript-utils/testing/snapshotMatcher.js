import { readFile, writeFile } from 'fs/promises';
import { fileURLToPath, URL } from 'url';
const argv = process.argv.slice(2);
const shouldUpdate = argv.includes('-u') || argv.includes('--update');
export default function snapshotMatcher(chai, utils) {
    utils.addMethod(chai.Assertion.prototype, 'toMatchSnapshot', 
    // eslint-disable-next-line @typescript-eslint/ban-types
    async function toMatchSnapshot(snapshotName, importMetaUrl) {
        const obj = utils.flag(this, 'object');
        const snapshotURL = new URL(`./fixtures/${snapshotName}.snap.ts`, importMetaUrl);
        const snapshotPath = fileURLToPath(snapshotURL);
        if (shouldUpdate) {
            await writeFile(snapshotPath, obj, 'utf8');
        }
        else {
            let snapshot;
            try {
                snapshot = await readFile(snapshotPath, 'utf8');
            }
            catch (e) {
                throw new Error(`Snapshot does not exist yet: ${snapshotURL}.\nConsider running tests with --update flag.`);
            }
            chai.assert.equal(obj, snapshot);
        }
    });
}
//# sourceMappingURL=snapshotMatcher.js.map