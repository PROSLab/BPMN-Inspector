import ClientPlugin from '@hilla/generator-typescript-plugin-client';
import createSourceFile from '@hilla/generator-typescript-utils/createSourceFile.js';
import DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager.js';
import PathManager from '@hilla/generator-typescript-utils/dependencies/PathManager.js';
import { OpenAPIV3 } from 'openapi-types';
import EndpointMethodOperationProcessor, { HILLA_FRONTEND_NAME, INIT_TYPE_NAME, } from './EndpointMethodOperationProcessor.js';
export default class EndpointProcessor {
    #dependencies = new DependencyManager(new PathManager());
    #methods;
    #name;
    #owner;
    #sourcePaths = new PathManager({ extension: 'ts' });
    #outputDir;
    constructor(name, owner, methods, outputDir) {
        this.#name = name;
        this.#owner = owner;
        this.#methods = methods;
        this.#outputDir = outputDir;
    }
    static async create(name, owner, methods, outputDir) {
        const endpoint = new EndpointProcessor(name, owner, methods, outputDir);
        endpoint.#dependencies.imports.default.add(endpoint.#dependencies.paths.createRelativePath(await ClientPlugin.getClientFileName(outputDir)), 'client');
        endpoint.#dependencies.imports.named.add(endpoint.#dependencies.paths.createBareModulePath(HILLA_FRONTEND_NAME), INIT_TYPE_NAME);
        return endpoint;
    }
    async process() {
        this.#owner.logger.debug(`Processing endpoint: ${this.#name}`);
        const statements = (await Promise.all(Array.from(this.#methods, async ([method, pathItem]) => this.#processMethod(method, pathItem)))).flatMap((item) => item);
        const { imports, exports } = this.#dependencies;
        return createSourceFile([...imports.toCode(), ...statements, ...exports.toCode()], this.#sourcePaths.createRelativePath(this.#name));
    }
    async #processMethod(method, pathItem) {
        this.#owner.logger.debug(`Processing endpoint method: ${this.#name}.${method}`);
        return (await Promise.all(Object.values(OpenAPIV3.HttpMethods)
            .filter((httpMethod) => pathItem[httpMethod])
            .map((httpMethod) => EndpointMethodOperationProcessor.createProcessor(httpMethod, this.#name, method, pathItem[httpMethod], this.#dependencies, this.#owner)?.process(this.#outputDir)))).filter(Boolean);
    }
}
//# sourceMappingURL=EndpointProcessor.js.map