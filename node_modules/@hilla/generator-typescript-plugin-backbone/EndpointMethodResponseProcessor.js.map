{"version":3,"file":"EndpointMethodResponseProcessor.js","sourceRoot":"","sources":["src/EndpointMethodResponseProcessor.ts"],"names":[],"mappings":"AAKA,OAAO,mBAAmB,MAAM,0BAA0B,CAAC;AAC3D,OAAO,EAAE,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAK9C,MAAM,CAAC,OAAO,OAAO,+BAA+B;IACzC,KAAK,CAAS;IACd,aAAa,CAAoB;IACjC,MAAM,CAAS;IACf,SAAS,CAAyB;IAE3C,YACE,IAAY,EACZ,QAAyC,EACzC,iBAAoC,EACpC,KAAa;QAEb,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,iBAAiB,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACpD,CAAC;IAEM,OAAO;QACZ,QAAQ,IAAI,CAAC,KAAK,EAAE;YAClB,KAAK,KAAK;gBACR,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;YAC3B;gBACE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,KAAK,oBAAoB,CAAC,CAAC;gBAC1E,OAAO,EAAE,CAAC;SACb;IACH,CAAC;IAED,UAAU;QACR,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,EAAE,MAAM,CAAC;QAErE,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3F,CAAC;CACF","sourcesContent":["import type Plugin from '@hilla/generator-typescript-core/Plugin.js';\nimport type DependencyManager from '@hilla/generator-typescript-utils/dependencies/DependencyManager';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyDeep } from 'type-fest';\nimport type { TypeNode } from 'typescript';\nimport TypeSchemaProcessor from './TypeSchemaProcessor.js';\nimport { defaultMediaType } from './utils.js';\n\nexport type EndpointMethodResponses = ReadonlyDeep<OpenAPIV3.ResponsesObject>;\nexport type EndpointMethodResponse = ReadonlyDeep<OpenAPIV3.ResponseObject>;\n\nexport default class EndpointMethodResponseProcessor {\n  readonly #code: string;\n  readonly #dependencies: DependencyManager;\n  readonly #owner: Plugin;\n  readonly #response: EndpointMethodResponse;\n\n  public constructor(\n    code: string,\n    response: EndpointMethodResponses[string],\n    dependencyManager: DependencyManager,\n    owner: Plugin,\n  ) {\n    this.#code = code;\n    this.#owner = owner;\n    this.#dependencies = dependencyManager;\n    this.#response = owner.resolver.resolve(response);\n  }\n\n  public process(): readonly TypeNode[] {\n    switch (this.#code) {\n      case '200':\n        return this.#processOk();\n      default:\n        this.#owner.logger.warn(`Response code '${this.#code} is not supported'`);\n        return [];\n    }\n  }\n\n  #processOk(): readonly TypeNode[] {\n    const rawSchema = this.#response.content?.[defaultMediaType]?.schema;\n\n    return rawSchema ? new TypeSchemaProcessor(rawSchema, this.#dependencies).process() : [];\n  }\n}\n"]}