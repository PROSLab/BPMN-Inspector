import SwaggerParser from '@apidevtools/swagger-parser';
import ts from 'typescript';
import File from './File.js';
import PluginManager from './PluginManager.js';
import ReferenceResolver from './ReferenceResolver.js';
export default class Generator {
    #logger;
    #manager;
    #parser;
    #outputDir;
    constructor(plugins, context) {
        this.#parser = new SwaggerParser();
        this.#manager = new PluginManager(plugins, new ReferenceResolver(this.#parser), context.logger);
        this.#logger = context.logger;
        this.#outputDir = context.outputDir;
    }
    async process(input) {
        this.#logger.global.debug('Processing OpenAPI');
        const api = (await this.#parser.bundle(JSON.parse(input)));
        const storage = {
            api,
            apiRefs: this.#parser.$refs,
            pluginStorage: new Map(),
            sources: [],
            outputDir: this.#outputDir,
        };
        this.#logger.global.debug('Executing plugins');
        await this.#manager.execute(storage);
        this.#logger.global.debug('Printing files');
        const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
        return storage.sources.map((file) => new File([printer.printFile(file)], file.fileName));
    }
}
//# sourceMappingURL=Generator.js.map