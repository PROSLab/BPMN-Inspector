{"version":3,"file":"Generator.js","sourceRoot":"","sources":["src/Generator.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,6BAA6B,CAAC;AAIxD,OAAO,EAAE,MAAM,YAAY,CAAC;AAC5B,OAAO,IAAI,MAAM,WAAW,CAAC;AAE7B,OAAO,aAAa,MAAM,oBAAoB,CAAC;AAC/C,OAAO,iBAAiB,MAAM,wBAAwB,CAAC;AAQvD,MAAM,CAAC,OAAO,OAAO,SAAS;IACnB,OAAO,CAAgB;IACvB,QAAQ,CAAgB;IACxB,OAAO,CAAgB;IACvB,UAAU,CAAqB;IAExC,YAAmB,OAAqC,EAAE,OAAyB;QACjF,IAAI,CAAC,OAAO,GAAG,IAAI,aAAa,EAAE,CAAC;QACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAa,CAAC,OAAO,EAAE,IAAI,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAChG,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;IACtC,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,KAAa;QAChC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAChD,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAqC,CAAC;QAE/F,MAAM,OAAO,GAAkB;YAC7B,GAAG;YACH,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;YAC3B,aAAa,EAAE,IAAI,GAAG,EAAE;YACxB,OAAO,EAAE,EAAE;YACX,SAAS,EAAE,IAAI,CAAC,UAAU;SAC3B,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QAC/C,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAErC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAC5C,MAAM,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEvE,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3F,CAAC;CACF","sourcesContent":["import SwaggerParser from '@apidevtools/swagger-parser';\nimport type LoggerFactory from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport type { OpenAPIV3 } from 'openapi-types';\nimport type { ReadonlyDeep } from 'type-fest';\nimport ts from 'typescript';\nimport File from './File.js';\nimport type { PluginConstructor } from './Plugin.js';\nimport PluginManager from './PluginManager.js';\nimport ReferenceResolver from './ReferenceResolver.js';\nimport type SharedStorage from './SharedStorage.js';\n\nexport type GeneratorContext = Readonly<{\n  logger: LoggerFactory;\n  outputDir?: string;\n}>;\n\nexport default class Generator {\n  readonly #logger: LoggerFactory;\n  readonly #manager: PluginManager;\n  readonly #parser: SwaggerParser;\n  readonly #outputDir: string | undefined;\n\n  public constructor(plugins: readonly PluginConstructor[], context: GeneratorContext) {\n    this.#parser = new SwaggerParser();\n    this.#manager = new PluginManager(plugins, new ReferenceResolver(this.#parser), context.logger);\n    this.#logger = context.logger;\n    this.#outputDir = context.outputDir;\n  }\n\n  public async process(input: string): Promise<readonly File[]> {\n    this.#logger.global.debug('Processing OpenAPI');\n    const api = (await this.#parser.bundle(JSON.parse(input))) as ReadonlyDeep<OpenAPIV3.Document>;\n\n    const storage: SharedStorage = {\n      api,\n      apiRefs: this.#parser.$refs,\n      pluginStorage: new Map(),\n      sources: [],\n      outputDir: this.#outputDir,\n    };\n\n    this.#logger.global.debug('Executing plugins');\n    await this.#manager.execute(storage);\n\n    this.#logger.global.debug('Printing files');\n    const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });\n\n    return storage.sources.map((file) => new File([printer.printFile(file)], file.fileName));\n  }\n}\n"]}