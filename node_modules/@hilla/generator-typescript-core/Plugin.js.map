{"version":3,"file":"Plugin.js","sourceRoot":"","sources":["src/Plugin.ts"],"names":[],"mappings":"AAMA,MAAM,CAAC,OAAO,OAAgB,MAAM;IACzB,QAAQ,CAAoB;IAC5B,MAAM,CAAS;IAExB,YAAmB,QAA2B,EAAE,MAAqB;QACnE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IAC/B,CAAC;CAKF","sourcesContent":["import type { Logger } from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport type LoggerFactory from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport type { Constructor } from 'type-fest';\nimport type ReferenceResolver from './ReferenceResolver.js';\nimport type SharedStorage from './SharedStorage.js';\n\nexport default abstract class Plugin {\n  readonly resolver: ReferenceResolver;\n  readonly logger: Logger;\n\n  public constructor(resolver: ReferenceResolver, logger: LoggerFactory) {\n    this.logger = logger.for(this.constructor.name);\n    this.resolver = resolver;\n  }\n\n  public get name(): string {\n    return this.constructor.name;\n  }\n\n  public abstract get path(): string;\n\n  public abstract execute(storage: SharedStorage): Promise<void>;\n}\n\nexport type PluginConstructor = Constructor<Plugin, ConstructorParameters<typeof Plugin>>;\n"]}