{"version":3,"file":"PluginManager.js","sourceRoot":"","sources":["src/PluginManager.ts"],"names":[],"mappings":"AAMA,MAAM,CAAC,OAAO,OAAO,aAAa;IACvB,QAAQ,CAAW;IAE5B,YAAmB,OAAqC,EAAE,QAA2B,EAAE,MAAqB;QAC1G,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7E,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IAClF,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAsB;QACzC,sCAAsC;QACtC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,QAAQ,EAAE;YAClC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;YAC9B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,qBAAqB,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;YACrF,4CAA4C;YAC5C,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SAC/B;IACH,CAAC;CACF","sourcesContent":["import type LoggerFactory from '@hilla/generator-typescript-utils/LoggerFactory.js';\nimport type Plugin from './Plugin.js';\nimport type { PluginConstructor } from './Plugin.js';\nimport type ReferenceResolver from './ReferenceResolver.js';\nimport type SharedStorage from './SharedStorage.js';\n\nexport default class PluginManager {\n  readonly #plugins: Plugin[];\n\n  public constructor(plugins: readonly PluginConstructor[], resolver: ReferenceResolver, logger: LoggerFactory) {\n    logger.global.info(`Plugins: ${plugins.map(({ name }) => name).join(', ')}`);\n    this.#plugins = plugins.map((PluginClass) => new PluginClass(resolver, logger));\n  }\n\n  public async execute(storage: SharedStorage): Promise<void> {\n    // We need to run plugins sequentially\n    for (const plugin of this.#plugins) {\n      const { name, path } = plugin;\n      plugin.logger.debug({ plugin: { name, path } }, `Executing plugin '${plugin.name}'`);\n      // eslint-disable-next-line no-await-in-loop\n      await plugin.execute(storage);\n    }\n  }\n}\n"]}