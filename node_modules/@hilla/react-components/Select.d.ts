import { type ComponentType, ReactNode } from 'react';
import { type SelectProps as _SelectProps, WebComponentModule } from './generated/Select.js';
import type { ReactSimpleRendererProps } from './renderers/useSimpleRenderer.js';
export * from './generated/Select.js';
export type SelectReactRendererProps = ReactSimpleRendererProps<WebComponentModule.Select>;
export type SelectProps = Omit<_SelectProps, 'children' | 'renderer'> & Readonly<{
    children?: ReactNode | ComponentType<SelectReactRendererProps>;
    renderer?: ComponentType<SelectReactRendererProps> | null;
}>;
declare const ForwardedSelect: import("react").ForwardRefExoticComponent<Omit<import("./utils/createComponent.js").ThemedWebComponentProps<WebComponentModule.Select, Readonly<{
    onValidated: import("@lit-labs/react").EventName<WebComponentModule.SelectValidatedEvent>;
    onChange: import("@lit-labs/react").EventName<WebComponentModule.SelectChangeEvent>;
    onOpenedChanged: import("@lit-labs/react").EventName<WebComponentModule.SelectOpenedChangedEvent>;
    onValueChanged: import("@lit-labs/react").EventName<WebComponentModule.SelectValueChangedEvent>;
    onInvalidChanged: import("@lit-labs/react").EventName<WebComponentModule.SelectInvalidChangedEvent>;
}>>, "children" | "renderer"> & Readonly<{
    children?: ReactNode | ComponentType<SelectReactRendererProps>;
    renderer?: ComponentType<Readonly<{
        original: WebComponentModule.Select;
    }>> | null | undefined;
}> & import("react").RefAttributes<WebComponentModule.Select>>;
export { ForwardedSelect as Select, WebComponentModule };
//# sourceMappingURL=Select.d.ts.map