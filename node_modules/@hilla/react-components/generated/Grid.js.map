{"version":3,"file":"Grid.js","sourceRoot":"","sources":["../src/generated/Grid.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,kBAAkB,MAAM,6BAA6B,CAAC;AAClE,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,eAAe,EAAqB,MAAM,6BAA6B,CAAC;AAgBjF,MAAM,MAAM,GAAG,EAAE,mBAAmB,EAAE,qBAAqB,EAAE,cAAc,EAAE,eAAe,EAAE,cAAc,EAAE,eAAe,EAAE,sBAAsB,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,sBAAsB,EAAE,wBAAwB,EAAE,WAAW,EAAE,YAAY,EAAE,eAAe,EAAE,gBAAgB,EAAE,aAAa,EAAE,cAAc,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,EAAE,WAAW,EAAE,aAAa,EAAE,cAAc,EAAE,qBAAqB,EAAE,uBAAuB,EAA2B,CAAC;AAE1gB,MAAM,CAAC,MAAM,IAAI,GAAG,eAAe,CAAC;IAChC,YAAY,EAAE,kBAAkB,CAAC,IAAI;IACrC,MAAM;IACN,KAAK,EAAE,KAAK;IACZ,OAAO,EAAE,aAAa;CACzB,CAE8B,CAAC;AAChC,OAAO,EAAE,kBAAkB,EAAE,CAAC","sourcesContent":["import type { EventName } from \"@lit-labs/react\";\nimport * as WebComponentModule from \"@vaadin/grid/vaadin-grid.js\";\nimport * as React from \"react\";\nimport { createComponent, WebComponentProps } from \"../utils/createComponent.js\";\nexport type GridEventMap<T1> = Readonly<{\n    onActiveItemChanged: EventName<WebComponentModule.GridEventMap<T1>[\"active-item-changed\"]>;\n    onCellActivate: EventName<WebComponentModule.GridEventMap<T1>[\"cell-activate\"]>;\n    onColumnResize: EventName<WebComponentModule.GridEventMap<T1>[\"column-resize\"]>;\n    onExpandedItemsChanged: EventName<WebComponentModule.GridEventMap<T1>[\"expanded-items-changed\"]>;\n    onLoadingChanged: EventName<WebComponentModule.GridEventMap<T1>[\"loading-changed\"]>;\n    onSelectedItemsChanged: EventName<WebComponentModule.GridEventMap<T1>[\"selected-items-changed\"]>;\n    onCellFocus: EventName<WebComponentModule.GridEventMap<T1>[\"cell-focus\"]>;\n    onColumnReorder: EventName<WebComponentModule.GridEventMap<T1>[\"column-reorder\"]>;\n    onGridDragend: EventName<WebComponentModule.GridEventMap<T1>[\"grid-dragend\"]>;\n    onGridDragstart: EventName<WebComponentModule.GridEventMap<T1>[\"grid-dragstart\"]>;\n    onGridDrop: EventName<WebComponentModule.GridEventMap<T1>[\"grid-drop\"]>;\n    onSizeChanged: EventName<CustomEvent<unknown>>;\n    onDataProviderChanged: EventName<CustomEvent<unknown>>;\n}>;\nconst events = { onActiveItemChanged: \"active-item-changed\", onCellActivate: \"cell-activate\", onColumnResize: \"column-resize\", onExpandedItemsChanged: \"expanded-items-changed\", onLoadingChanged: \"loading-changed\", onSelectedItemsChanged: \"selected-items-changed\", onCellFocus: \"cell-focus\", onColumnReorder: \"column-reorder\", onGridDragend: \"grid-dragend\", onGridDragstart: \"grid-dragstart\", onGridDrop: \"grid-drop\", onSizeChanged: \"size-changed\", onDataProviderChanged: \"data-provider-changed\" } as GridEventMap<unknown>;\nexport type GridProps<T1> = WebComponentProps<WebComponentModule.Grid<T1>, GridEventMap<T1>>;\nexport const Grid = createComponent({\n    elementClass: WebComponentModule.Grid,\n    events,\n    react: React,\n    tagName: \"vaadin-grid\"\n}) as <T1>(props: GridProps<T1> & {\n    ref?: React.ForwardedRef<WebComponentModule.Grid<T1>>;\n}) => React.ReactElement | null;\nexport { WebComponentModule };\n"]}