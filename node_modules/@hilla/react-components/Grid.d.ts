import { type ComponentType, type ForwardedRef, type ReactElement } from 'react';
import { type GridProps as _GridProps, WebComponentModule } from './generated/Grid.js';
import type { GridRowDetailsReactRendererProps } from './renderers/grid.js';
export * from './generated/Grid.js';
export type GridProps<TItem> = Omit<_GridProps<TItem>, 'rowDetailsRenderer'> & Readonly<{
    rowDetailsRenderer?: ComponentType<GridRowDetailsReactRendererProps<TItem>> | null;
}>;
declare function Grid<TItem = WebComponentModule.GridDefaultItem>(props: GridProps<TItem>, ref: ForwardedRef<WebComponentModule.Grid<TItem>>): ReactElement | null;
declare const ForwardedGrid: <TItem = any>(props: Omit<import("./utils/createComponent.js").ThemedWebComponentProps<WebComponentModule.Grid<TItem>, Readonly<{
    onActiveItemChanged: import("@lit-labs/react").EventName<WebComponentModule.GridActiveItemChangedEvent<TItem>>;
    onCellActivate: import("@lit-labs/react").EventName<WebComponentModule.GridCellActivateEvent<TItem>>;
    onColumnResize: import("@lit-labs/react").EventName<WebComponentModule.GridColumnResizeEvent<TItem>>;
    onExpandedItemsChanged: import("@lit-labs/react").EventName<WebComponentModule.GridExpandedItemsChangedEvent<TItem>>;
    onLoadingChanged: import("@lit-labs/react").EventName<WebComponentModule.GridLoadingChangedEvent>;
    onSelectedItemsChanged: import("@lit-labs/react").EventName<WebComponentModule.GridSelectedItemsChangedEvent<TItem>>;
    onCellFocus: import("@lit-labs/react").EventName<WebComponentModule.GridCellFocusEvent<TItem>>;
    onColumnReorder: import("@lit-labs/react").EventName<WebComponentModule.GridColumnReorderEvent<TItem>>;
    onGridDragend: import("@lit-labs/react").EventName<Event>;
    onGridDragstart: import("@lit-labs/react").EventName<WebComponentModule.GridDragStartEvent<TItem>>;
    onGridDrop: import("@lit-labs/react").EventName<WebComponentModule.GridDropEvent<TItem>>;
    onSizeChanged: import("@lit-labs/react").EventName<CustomEvent<unknown>>;
    onDataProviderChanged: import("@lit-labs/react").EventName<CustomEvent<unknown>>;
}>>, "rowDetailsRenderer"> & Readonly<{
    rowDetailsRenderer?: ComponentType<Readonly<{
        item: TItem;
        model: WebComponentModule.GridItemModel<TItem>;
        original: WebComponentModule.Grid<TItem>;
    }>> | null | undefined;
}> & {
    ref?: ForwardedRef<WebComponentModule.Grid<TItem>> | undefined;
}) => ReactElement | null;
export { ForwardedGrid as Grid, WebComponentModule };
//# sourceMappingURL=Grid.d.ts.map