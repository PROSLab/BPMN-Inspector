import { type ComponentType } from 'react';
import { type ContextMenuProps as _ContextMenuProps, WebComponentModule } from './generated/ContextMenu.js';
import { type ReactContextRendererProps } from './renderers/useContextRenderer.js';
export * from './generated/ContextMenu.js';
export type ContextMenuReactRendererProps = ReactContextRendererProps<WebComponentModule.ContextMenuRendererContext, WebComponentModule.ContextMenu>;
export type ContextMenuProps = Omit<_ContextMenuProps, 'opened' | 'renderer'> & Readonly<{
    renderer?: ComponentType<ContextMenuReactRendererProps> | null;
}>;
declare const ForwardedContextMenu: import("react").ForwardRefExoticComponent<Omit<import("./utils/createComponent.js").ThemedWebComponentProps<WebComponentModule.ContextMenu, Readonly<{
    onItemSelected: import("@lit-labs/react").EventName<WebComponentModule.ContextMenuItemSelectedEvent>;
    onOpenedChanged: import("@lit-labs/react").EventName<WebComponentModule.ContextMenuOpenedChangedEvent>;
}>>, "opened" | "renderer"> & Readonly<{
    renderer?: ComponentType<Readonly<{
        context: WebComponentModule.ContextMenuRendererContext;
        original: WebComponentModule.ContextMenu;
    }>> | null | undefined;
}> & import("react").RefAttributes<WebComponentModule.ContextMenu>>;
export { ForwardedContextMenu as ContextMenu, WebComponentModule };
//# sourceMappingURL=ContextMenu.d.ts.map