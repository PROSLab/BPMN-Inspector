{"version":3,"file":"useModelRenderer.js","sourceRoot":"","sources":["../src/renderers/useModelRenderer.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAA0B,MAAM,kBAAkB,CAAC;AAkBvE,MAAM,UAAU,wBAAwB,CAA+C,CAAC,QAAQ,EAAE,KAAK,CAGtG;IACC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;AAC/C,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,aAAsE;IAEtE,OAAO,WAAW,CAAC,aAAa,EAAE,wBAAwB,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["import type { ComponentType } from 'react';\nimport type { Slice } from './renderer.js';\nimport { useRenderer, type UseRendererResult } from './useRenderer.js';\n\nexport type Model<I> = Readonly<{\n  item: I;\n}>;\n\nexport type ReactModelRendererProps<I, M extends Model<I>, O extends HTMLElement> = Readonly<{\n  item: I;\n  model: M;\n  original: O;\n}>;\n\nexport type WebComponentModelRenderer<I, M extends Model<I>, O extends HTMLElement> = (\n  root: HTMLElement,\n  original: O,\n  model: M,\n) => void;\n\nexport function convertModelRendererArgs<I, M extends Model<I>, O extends HTMLElement>([original, model]: Slice<\n  Parameters<WebComponentModelRenderer<I, M, O>>,\n  1\n>): ReactModelRendererProps<I, M, O> {\n  return { item: model.item, model, original };\n}\n\nexport function useModelRenderer<I, M extends Model<I>, O extends HTMLElement>(\n  reactRenderer?: ComponentType<ReactModelRendererProps<I, M, O>> | null,\n): UseRendererResult<WebComponentModelRenderer<I, M, O>> {\n  return useRenderer(reactRenderer, convertModelRendererArgs);\n}\n"]}