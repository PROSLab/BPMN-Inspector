{"version":3,"file":"useContextRenderer.js","sourceRoot":"","sources":["../src/renderers/useContextRenderer.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAA0B,MAAM,kBAAkB,CAAC;AAavE,MAAM,UAAU,0BAA0B,CAA2B,CAAC,QAAQ,EAAE,OAAO,CAGtF;IACC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;AAC/B,CAAC;AAED,MAAM,UAAU,kBAAkB,CAChC,aAAqE;IAErE,OAAO,WAAW,CAAC,aAAa,EAAE,0BAA0B,CAAC,CAAC;AAChE,CAAC","sourcesContent":["import type { ComponentType } from 'react';\nimport type { Slice } from './renderer.js';\nimport { useRenderer, type UseRendererResult } from './useRenderer.js';\n\nexport type ReactContextRendererProps<C, O extends HTMLElement> = Readonly<{\n  context: C;\n  original: O;\n}>;\n\nexport type WebComponentContextRenderer<C, O extends HTMLElement> = (\n  root: HTMLElement,\n  original: O,\n  context: C,\n) => void;\n\nexport function convertContextRendererArgs<C, O extends HTMLElement>([original, context]: Slice<\n  Parameters<WebComponentContextRenderer<C, O>>,\n  1\n>): ReactContextRendererProps<C, O> {\n  return { context, original };\n}\n\nexport function useContextRenderer<C, O extends HTMLElement>(\n  reactRenderer?: ComponentType<ReactContextRendererProps<C, O>> | null,\n): UseRendererResult<WebComponentContextRenderer<C, O>> {\n  return useRenderer(reactRenderer, convertContextRendererArgs);\n}\n"]}