import type { ComboBoxDefaultItem } from '@vaadin/combo-box';
import { type ComponentType, type ForwardedRef, type ReactElement } from 'react';
import { type ComboBoxLightProps as _ComboBoxLightProps, WebComponentModule } from './generated/ComboBoxLight.js';
import type { ComboBoxReactRendererProps } from './renderers/combobox.js';
export * from './generated/ComboBoxLight.js';
export type ComboBoxLightProps<TItem> = Omit<_ComboBoxLightProps<TItem>, 'renderer'> & Readonly<{
    renderer?: ComponentType<ComboBoxReactRendererProps<TItem>> | null;
}>;
declare function ComboBoxLight<TItem = ComboBoxDefaultItem>(props: ComboBoxLightProps<TItem>, ref: ForwardedRef<WebComponentModule.ComboBoxLight<TItem>>): ReactElement | null;
declare const ForwardedComboBoxLight: <TItem = any>(props: Omit<import("./utils/createComponent.js").ThemedWebComponentProps<WebComponentModule.ComboBoxLight<TItem>, Readonly<{
    onChange: import("@lit-labs/react").EventName<WebComponentModule.ComboBoxLightChangeEvent<TItem>>;
    onCustomValueSet: import("@lit-labs/react").EventName<WebComponentModule.ComboBoxLightCustomValueSetEvent>;
    onSelectedItemChanged: import("@lit-labs/react").EventName<WebComponentModule.ComboBoxLightSelectedItemChangedEvent<TItem>>;
    onValueChanged: import("@lit-labs/react").EventName<WebComponentModule.ComboBoxLightValueChangedEvent>;
    onValidated: import("@lit-labs/react").EventName<WebComponentModule.ComboBoxLightValidatedEvent>;
    onOpenedChanged: import("@lit-labs/react").EventName<WebComponentModule.ComboBoxLightOpenedChangedEvent>;
    onFilterChanged: import("@lit-labs/react").EventName<WebComponentModule.ComboBoxLightFilterChangedEvent>;
    onInvalidChanged: import("@lit-labs/react").EventName<WebComponentModule.ComboBoxLightInvalidChangedEvent>;
}>>, "renderer"> & Readonly<{
    renderer?: ComponentType<Readonly<{
        item: TItem;
        model: WebComponentModule.ComboBoxItemModel<TItem>;
        original: import("@vaadin/combo-box/src/vaadin-combo-box.js").ComboBox<TItem>;
    }>> | null | undefined;
}> & {
    ref?: ForwardedRef<WebComponentModule.ComboBoxLight<TItem>> | undefined;
}) => ReactElement | null;
export { ForwardedComboBoxLight as ComboBoxLight, WebComponentModule };
//# sourceMappingURL=ComboBoxLight.d.ts.map