// node_modules/@lit-labs/react/development/create-component.js
var DEV_MODE = true;
var reservedReactProperties = /* @__PURE__ */ new Set([
  "children",
  "localName",
  "ref",
  "style",
  "className"
]);
var listenedEvents = /* @__PURE__ */ new WeakMap();
var addOrUpdateEventListener = (node, event, listener) => {
  let events = listenedEvents.get(node);
  if (events === void 0) {
    listenedEvents.set(node, events = /* @__PURE__ */ new Map());
  }
  let handler = events.get(event);
  if (listener !== void 0) {
    if (handler === void 0) {
      events.set(event, handler = { handleEvent: listener });
      node.addEventListener(event, handler);
    } else {
      handler.handleEvent = listener;
    }
  } else if (handler !== void 0) {
    events.delete(event);
    node.removeEventListener(event, handler);
  }
};
var setProperty = (node, name, value, old, events) => {
  const event = events === null || events === void 0 ? void 0 : events[name];
  if (event !== void 0 && value !== old) {
    addOrUpdateEventListener(node, event, value);
    return;
  }
  if ((value === void 0 || value === null) && name in HTMLElement.prototype) {
    node.removeAttribute(name);
    return;
  }
  node[name] = value;
};
var setRef = (ref, value) => {
  if (typeof ref === "function") {
    ref(value);
  } else {
    ref.current = value;
  }
};
function createComponent(ReactOrOptions = window.React, tagName, elementClass, events, displayName) {
  let React;
  let tag;
  let element;
  if (tagName === void 0) {
    const options = ReactOrOptions;
    ({ tagName: tag, elementClass: element, events, displayName } = options);
    React = options.react;
  } else {
    React = ReactOrOptions;
    element = elementClass;
    tag = tagName;
  }
  if (DEV_MODE) {
    for (const p of reservedReactProperties) {
      if (p in element.prototype && !(p in HTMLElement.prototype)) {
        console.warn(`${tagName} contains property ${p} which is a React
reserved property. It will be used by React and not set on
the element.`);
      }
    }
  }
  const Component = React.Component;
  const createElement = React.createElement;
  const eventProps = new Set(Object.keys(events !== null && events !== void 0 ? events : {}));
  class ReactComponent extends Component {
    constructor() {
      super(...arguments);
      this._element = null;
    }
    _updateElement(oldProps) {
      if (this._element === null) {
        return;
      }
      for (const prop in this._elementProps) {
        setProperty(this._element, prop, this.props[prop], oldProps ? oldProps[prop] : void 0, events);
      }
    }
    componentDidMount() {
      this._updateElement();
    }
    componentDidUpdate(old) {
      this._updateElement(old);
    }
    render() {
      const { __forwardedRef, ...userProps } = this.props;
      if (this._forwardedRef !== __forwardedRef) {
        this._ref = (value) => {
          if (__forwardedRef !== null) {
            setRef(__forwardedRef, value);
          }
          this._element = value;
          this._forwardedRef = __forwardedRef;
        };
      }
      this._elementProps = {};
      const props = { ref: this._ref };
      for (const [k, v] of Object.entries(userProps)) {
        if (reservedReactProperties.has(k)) {
          props[k === "className" ? "class" : k] = v;
          continue;
        }
        if (eventProps.has(k) || k in element.prototype) {
          this._elementProps[k] = v;
          continue;
        }
        props[k] = v;
      }
      return createElement(tag, props);
    }
  }
  ReactComponent.displayName = displayName !== null && displayName !== void 0 ? displayName : element.name;
  const ForwardedComponent = React.forwardRef((props, __forwardedRef) => createElement(ReactComponent, { ...props, __forwardedRef }, props === null || props === void 0 ? void 0 : props.children));
  ForwardedComponent.displayName = ReactComponent.displayName;
  return ForwardedComponent;
}

// node_modules/@hilla/react-components/utils/createComponent.js
function createComponent2(options) {
  const { elementClass } = options;
  return createComponent("_properties" in elementClass ? {
    ...options,
    elementClass: {
      name: elementClass.name,
      prototype: elementClass._properties
    }
  } : options);
}

export {
  createComponent2 as createComponent
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
//# sourceMappingURL=chunk-376UEISJ.js.map
