{
  "version": 3,
  "sources": ["../../fmin/src/bisect.js", "../../fmin/src/blas1.js", "../../fmin/src/nelderMead.js", "../../fmin/src/linesearch.js", "../../fmin/src/conjugateGradient.js", "../../@upsetjs/venn.js/build/venn.esm.js", "../../chartjs-chart-venn/src/model/interfaces.ts", "../../chartjs-chart-venn/src/model/generateArcSlicePath.ts", "../../chartjs-chart-venn/src/model/math.ts", "../../chartjs-chart-venn/src/elements/ArcSlice.ts", "../../chartjs-chart-venn/src/model/layout.ts", "../../chartjs-chart-venn/src/controllers/patchController.ts", "../../chartjs-chart-venn/src/controllers/VennDiagramController.ts", "../../chartjs-chart-venn/src/model/euler.ts", "../../chartjs-chart-venn/src/controllers/EulerDiagramController.ts", "../../chartjs-chart-venn/src/data.ts"],
  "sourcesContent": ["/** finds the zeros of a function, given two starting points (which must\n * have opposite signs */\nexport function bisect(f, a, b, parameters) {\n    parameters = parameters || {};\n    var maxIterations = parameters.maxIterations || 100,\n        tolerance = parameters.tolerance || 1e-10,\n        fA = f(a),\n        fB = f(b),\n        delta = b - a;\n\n    if (fA * fB > 0) {\n        throw \"Initial bisect points must have opposite signs\";\n    }\n\n    if (fA === 0) return a;\n    if (fB === 0) return b;\n\n    for (var i = 0; i < maxIterations; ++i) {\n        delta /= 2;\n        var mid = a + delta,\n            fMid = f(mid);\n\n        if (fMid * fA >= 0) {\n            a = mid;\n        }\n\n        if ((Math.abs(delta) < tolerance) || (fMid === 0)) {\n            return mid;\n        }\n    }\n    return a + delta;\n}\n", "// need some basic operations on vectors, rather than adding a dependency,\n// just define here\nexport function zeros(x) { var r = new Array(x); for (var i = 0; i < x; ++i) { r[i] = 0; } return r; }\nexport function zerosM(x,y) { return zeros(x).map(function() { return zeros(y); }); }\n\nexport function dot(a, b) {\n    var ret = 0;\n    for (var i = 0; i < a.length; ++i) {\n        ret += a[i] * b[i];\n    }\n    return ret;\n}\n\nexport function norm2(a)  {\n    return Math.sqrt(dot(a, a));\n}\n\nexport function scale(ret, value, c) {\n    for (var i = 0; i < value.length; ++i) {\n        ret[i] = value[i] * c;\n    }\n}\n\nexport function weightedSum(ret, w1, v1, w2, v2) {\n    for (var j = 0; j < ret.length; ++j) {\n        ret[j] = w1 * v1[j] + w2 * v2[j];\n    }\n}\n", "import {dot, norm2, weightedSum} from \"./blas1\";\n\n/** minimizes a function using the downhill simplex method */\nexport function nelderMead(f, x0, parameters) {\n    parameters = parameters || {};\n\n    var maxIterations = parameters.maxIterations || x0.length * 200,\n        nonZeroDelta = parameters.nonZeroDelta || 1.05,\n        zeroDelta = parameters.zeroDelta || 0.001,\n        minErrorDelta = parameters.minErrorDelta || 1e-6,\n        minTolerance = parameters.minErrorDelta || 1e-5,\n        rho = (parameters.rho !== undefined) ? parameters.rho : 1,\n        chi = (parameters.chi !== undefined) ? parameters.chi : 2,\n        psi = (parameters.psi !== undefined) ? parameters.psi : -0.5,\n        sigma = (parameters.sigma !== undefined) ? parameters.sigma : 0.5,\n        maxDiff;\n\n    // initialize simplex.\n    var N = x0.length,\n        simplex = new Array(N + 1);\n    simplex[0] = x0;\n    simplex[0].fx = f(x0);\n    simplex[0].id = 0;\n    for (var i = 0; i < N; ++i) {\n        var point = x0.slice();\n        point[i] = point[i] ? point[i] * nonZeroDelta : zeroDelta;\n        simplex[i+1] = point;\n        simplex[i+1].fx = f(point);\n        simplex[i+1].id = i+1;\n    }\n\n    function updateSimplex(value) {\n        for (var i = 0; i < value.length; i++) {\n            simplex[N][i] = value[i];\n        }\n        simplex[N].fx = value.fx;\n    }\n\n    var sortOrder = function(a, b) { return a.fx - b.fx; };\n\n    var centroid = x0.slice(),\n        reflected = x0.slice(),\n        contracted = x0.slice(),\n        expanded = x0.slice();\n\n    for (var iteration = 0; iteration < maxIterations; ++iteration) {\n        simplex.sort(sortOrder);\n\n        if (parameters.history) {\n            // copy the simplex (since later iterations will mutate) and\n            // sort it to have a consistent order between iterations\n            var sortedSimplex = simplex.map(function (x) {\n                var state = x.slice();\n                state.fx = x.fx;\n                state.id = x.id;\n                return state;\n            });\n            sortedSimplex.sort(function(a,b) { return a.id - b.id; });\n\n            parameters.history.push({x: simplex[0].slice(),\n                                     fx: simplex[0].fx,\n                                     simplex: sortedSimplex});\n        }\n\n        maxDiff = 0;\n        for (i = 0; i < N; ++i) {\n            maxDiff = Math.max(maxDiff, Math.abs(simplex[0][i] - simplex[1][i]));\n        }\n\n        if ((Math.abs(simplex[0].fx - simplex[N].fx) < minErrorDelta) &&\n            (maxDiff < minTolerance)) {\n            break;\n        }\n\n        // compute the centroid of all but the worst point in the simplex\n        for (i = 0; i < N; ++i) {\n            centroid[i] = 0;\n            for (var j = 0; j < N; ++j) {\n                centroid[i] += simplex[j][i];\n            }\n            centroid[i] /= N;\n        }\n\n        // reflect the worst point past the centroid  and compute loss at reflected\n        // point\n        var worst = simplex[N];\n        weightedSum(reflected, 1+rho, centroid, -rho, worst);\n        reflected.fx = f(reflected);\n\n        // if the reflected point is the best seen, then possibly expand\n        if (reflected.fx < simplex[0].fx) {\n            weightedSum(expanded, 1+chi, centroid, -chi, worst);\n            expanded.fx = f(expanded);\n            if (expanded.fx < reflected.fx) {\n                updateSimplex(expanded);\n            }  else {\n                updateSimplex(reflected);\n            }\n        }\n\n        // if the reflected point is worse than the second worst, we need to\n        // contract\n        else if (reflected.fx >= simplex[N-1].fx) {\n            var shouldReduce = false;\n\n            if (reflected.fx > worst.fx) {\n                // do an inside contraction\n                weightedSum(contracted, 1+psi, centroid, -psi, worst);\n                contracted.fx = f(contracted);\n                if (contracted.fx < worst.fx) {\n                    updateSimplex(contracted);\n                } else {\n                    shouldReduce = true;\n                }\n            } else {\n                // do an outside contraction\n                weightedSum(contracted, 1-psi * rho, centroid, psi*rho, worst);\n                contracted.fx = f(contracted);\n                if (contracted.fx < reflected.fx) {\n                    updateSimplex(contracted);\n                } else {\n                    shouldReduce = true;\n                }\n            }\n\n            if (shouldReduce) {\n                // if we don't contract here, we're done\n                if (sigma >= 1) break;\n\n                // do a reduction\n                for (i = 1; i < simplex.length; ++i) {\n                    weightedSum(simplex[i], 1 - sigma, simplex[0], sigma, simplex[i]);\n                    simplex[i].fx = f(simplex[i]);\n                }\n            }\n        } else {\n            updateSimplex(reflected);\n        }\n    }\n\n    simplex.sort(sortOrder);\n    return {fx : simplex[0].fx,\n            x : simplex[0]};\n}\n", "import {dot, weightedSum} from \"./blas1\";\n\n\n/// searches along line 'pk' for a point that satifies the wolfe conditions\n/// See 'Numerical Optimization' by Nocedal and Wright p59-60\n/// f : objective function\n/// pk : search direction\n/// current: object containing current gradient/loss\n/// next: output: contains next gradient/loss\n/// returns a: step size taken\nexport function wolfeLineSearch(f, pk, current, next, a, c1, c2) {\n    var phi0 = current.fx, phiPrime0 = dot(current.fxprime, pk),\n        phi = phi0, phi_old = phi0,\n        phiPrime = phiPrime0,\n        a0 = 0;\n\n    a = a || 1;\n    c1 = c1 || 1e-6;\n    c2 = c2 || 0.1;\n\n    function zoom(a_lo, a_high, phi_lo) {\n        for (var iteration = 0; iteration < 16; ++iteration) {\n            a = (a_lo + a_high)/2;\n            weightedSum(next.x, 1.0, current.x, a, pk);\n            phi = next.fx = f(next.x, next.fxprime);\n            phiPrime = dot(next.fxprime, pk);\n\n            if ((phi > (phi0 + c1 * a * phiPrime0)) ||\n                (phi >= phi_lo)) {\n                a_high = a;\n\n            } else  {\n                if (Math.abs(phiPrime) <= -c2 * phiPrime0) {\n                    return a;\n                }\n\n                if (phiPrime * (a_high - a_lo) >=0) {\n                    a_high = a_lo;\n                }\n\n                a_lo = a;\n                phi_lo = phi;\n            }\n        }\n\n        return 0;\n    }\n\n    for (var iteration = 0; iteration < 10; ++iteration) {\n        weightedSum(next.x, 1.0, current.x, a, pk);\n        phi = next.fx = f(next.x, next.fxprime);\n        phiPrime = dot(next.fxprime, pk);\n        if ((phi > (phi0 + c1 * a * phiPrime0)) ||\n            (iteration && (phi >= phi_old))) {\n            return zoom(a0, a, phi_old);\n        }\n\n        if (Math.abs(phiPrime) <= -c2 * phiPrime0) {\n            return a;\n        }\n\n        if (phiPrime >= 0 ) {\n            return zoom(a, a0, phi);\n        }\n\n        phi_old = phi;\n        a0 = a;\n        a *= 2;\n    }\n\n    return a;\n}\n", "import {dot, norm2, scale, weightedSum} from \"./blas1\";\nimport {wolfeLineSearch} from \"./linesearch\";\n\nexport function conjugateGradient(f, initial, params) {\n    // allocate all memory up front here, keep out of the loop for perfomance\n    // reasons\n    var current = {x: initial.slice(), fx: 0, fxprime: initial.slice()},\n        next = {x: initial.slice(), fx: 0, fxprime: initial.slice()},\n        yk = initial.slice(),\n        pk, temp,\n        a = 1,\n        maxIterations;\n\n    params = params || {};\n    maxIterations = params.maxIterations || initial.length * 20;\n\n    current.fx = f(current.x, current.fxprime);\n    pk = current.fxprime.slice();\n    scale(pk, current.fxprime,-1);\n\n    for (var i = 0; i < maxIterations; ++i) {\n        a = wolfeLineSearch(f, pk, current, next, a);\n\n        // todo: history in wrong spot?\n        if (params.history) {\n            params.history.push({x: current.x.slice(),\n                                 fx: current.fx,\n                                 fxprime: current.fxprime.slice(),\n                                 alpha: a});\n        }\n\n        if (!a) {\n            // faiiled to find point that satifies wolfe conditions.\n            // reset direction for next iteration\n            scale(pk, current.fxprime, -1);\n\n        } else {\n            // update direction using Polak\u2013Ribiere CG method\n            weightedSum(yk, 1, next.fxprime, -1, current.fxprime);\n\n            var delta_k = dot(current.fxprime, current.fxprime),\n                beta_k = Math.max(0, dot(yk, next.fxprime) / delta_k);\n\n            weightedSum(pk, beta_k, pk, -1, next.fxprime);\n\n            temp = current;\n            current = next;\n            next = temp;\n        }\n\n        if (norm2(current.fxprime) <= 1e-5) {\n            break;\n        }\n    }\n\n    if (params.history) {\n        params.history.push({x: current.x.slice(),\n                             fx: current.fx,\n                             fxprime: current.fxprime.slice(),\n                             alpha: a});\n    }\n\n    return current;\n}\n", "import { nelderMead, bisect, norm2, zeros, conjugateGradient, scale, zerosM } from 'fmin';\n\nconst SMALL$1 = 1e-10;\n\n/**\n * Returns the intersection area of a bunch of circles (where each circle\n * is an object having an x,y and radius property)\n * @param {ReadonlyArray<{x: number, y: number, radius: number}>} circles\n * @param {undefined | { area?: number, arcArea?: number, polygonArea?: number, arcs?: ReadonlyArray<{ circle: {x: number, y: number, radius: number}, width: number, p1: {x: number, y: number}, p2: {x: number, y: number} }>, innerPoints: ReadonlyArray<{\n    x: number;\n    y: number;\n    parentIndex: [number, number];\n}>, intersectionPoints: ReadonlyArray<{\n  x: number;\n  y: number;\n  parentIndex: [number, number];\n}> }} stats\n * @returns {number}\n */\nfunction intersectionArea(circles, stats) {\n  // get all the intersection points of the circles\n  const intersectionPoints = getIntersectionPoints(circles);\n\n  // filter out points that aren't included in all the circles\n  const innerPoints = intersectionPoints.filter((p) => containedInCircles(p, circles));\n\n  let arcArea = 0;\n  let polygonArea = 0;\n  /** @type {{ circle: {x: number, y: number, radius: number}, width: number, p1: {x: number, y: number}, p2: {x: number, y: number} }[]} */\n  const arcs = [];\n\n  // if we have intersection points that are within all the circles,\n  // then figure out the area contained by them\n  if (innerPoints.length > 1) {\n    // sort the points by angle from the center of the polygon, which lets\n    // us just iterate over points to get the edges\n    const center = getCenter(innerPoints);\n    for (let i = 0; i < innerPoints.length; ++i) {\n      const p = innerPoints[i];\n      p.angle = Math.atan2(p.x - center.x, p.y - center.y);\n    }\n    innerPoints.sort((a, b) => b.angle - a.angle);\n\n    // iterate over all points, get arc between the points\n    // and update the areas\n    let p2 = innerPoints[innerPoints.length - 1];\n    for (let i = 0; i < innerPoints.length; ++i) {\n      const p1 = innerPoints[i];\n\n      // polygon area updates easily ...\n      polygonArea += (p2.x + p1.x) * (p1.y - p2.y);\n\n      // updating the arc area is a little more involved\n      const midPoint = { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };\n      /** @types null | { circle: {x: number, y: number, radius: number}, width: number, p1: {x: number, y: number}, p2: {x: number, y: number} } */\n      let arc = null;\n\n      for (let j = 0; j < p1.parentIndex.length; ++j) {\n        if (p2.parentIndex.includes(p1.parentIndex[j])) {\n          // figure out the angle halfway between the two points\n          // on the current circle\n          const circle = circles[p1.parentIndex[j]];\n          const a1 = Math.atan2(p1.x - circle.x, p1.y - circle.y);\n          const a2 = Math.atan2(p2.x - circle.x, p2.y - circle.y);\n\n          let angleDiff = a2 - a1;\n          if (angleDiff < 0) {\n            angleDiff += 2 * Math.PI;\n          }\n\n          // and use that angle to figure out the width of the\n          // arc\n          const a = a2 - angleDiff / 2;\n          let width = distance(midPoint, {\n            x: circle.x + circle.radius * Math.sin(a),\n            y: circle.y + circle.radius * Math.cos(a),\n          });\n\n          // clamp the width to the largest is can actually be\n          // (sometimes slightly overflows because of FP errors)\n          if (width > circle.radius * 2) {\n            width = circle.radius * 2;\n          }\n\n          // pick the circle whose arc has the smallest width\n          if (arc == null || arc.width > width) {\n            arc = { circle, width, p1, p2, large: width > circle.radius, sweep: true };\n          }\n        }\n      }\n\n      if (arc != null) {\n        arcs.push(arc);\n        arcArea += circleArea(arc.circle.radius, arc.width);\n        p2 = p1;\n      }\n    }\n  } else {\n    // no intersection points, is either disjoint - or is completely\n    // overlapped. figure out which by examining the smallest circle\n    let smallest = circles[0];\n    for (let i = 1; i < circles.length; ++i) {\n      if (circles[i].radius < smallest.radius) {\n        smallest = circles[i];\n      }\n    }\n\n    // make sure the smallest circle is completely contained in all\n    // the other circles\n    let disjoint = false;\n    for (let i = 0; i < circles.length; ++i) {\n      if (distance(circles[i], smallest) > Math.abs(smallest.radius - circles[i].radius)) {\n        disjoint = true;\n        break;\n      }\n    }\n\n    if (disjoint) {\n      arcArea = polygonArea = 0;\n    } else {\n      arcArea = smallest.radius * smallest.radius * Math.PI;\n      arcs.push({\n        circle: smallest,\n        p1: { x: smallest.x, y: smallest.y + smallest.radius },\n        p2: { x: smallest.x - SMALL$1, y: smallest.y + smallest.radius },\n        width: smallest.radius * 2,\n        large: true,\n        sweep: true,\n      });\n    }\n  }\n\n  polygonArea /= 2;\n\n  if (stats) {\n    stats.area = arcArea + polygonArea;\n    stats.arcArea = arcArea;\n    stats.polygonArea = polygonArea;\n    stats.arcs = arcs;\n    stats.innerPoints = innerPoints;\n    stats.intersectionPoints = intersectionPoints;\n  }\n\n  return arcArea + polygonArea;\n}\n\n/**\n * returns whether a point is contained by all of a list of circles\n * @param {{x: number, y: number}} point\n * @param {ReadonlyArray<{x: number, y: number, radius: number}>} circles\n * @returns {boolean}\n */\nfunction containedInCircles(point, circles) {\n  return circles.every((circle) => distance(point, circle) < circle.radius + SMALL$1);\n}\n\n/**\n * Gets all intersection points between a bunch of circles\n * @param {ReadonlyArray<{x: number, y: number, radius: number}>} circles\n * @returns {ReadonlyArray<{x: number, y: number, parentIndex: [number, number]}>}\n */\nfunction getIntersectionPoints(circles) {\n  /** @type {{x: number, y: number, parentIndex: [number, number]}[]} */\n  const ret = [];\n  for (let i = 0; i < circles.length; ++i) {\n    for (let j = i + 1; j < circles.length; ++j) {\n      const intersect = circleCircleIntersection(circles[i], circles[j]);\n      for (const p of intersect) {\n        p.parentIndex = [i, j];\n        ret.push(p);\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Circular segment area calculation. See http://mathworld.wolfram.com/CircularSegment.html\n * @param {number} r\n * @param {number} width\n * @returns {number}\n **/\nfunction circleArea(r, width) {\n  return r * r * Math.acos(1 - width / r) - (r - width) * Math.sqrt(width * (2 * r - width));\n}\n\n/**\n * euclidean distance between two points\n * @param {{x: number, y: number}} p1\n * @param {{x: number, y: number}} p2\n * @returns {number}\n **/\nfunction distance(p1, p2) {\n  return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));\n}\n\n/**\n * Returns the overlap area of two circles of radius r1 and r2 - that\n * have their centers separated by distance d. Simpler faster\n * circle intersection for only two circles\n * @param {number} r1\n * @param {number} r2\n * @param {number} d\n * @returns {number}\n */\nfunction circleOverlap(r1, r2, d) {\n  // no overlap\n  if (d >= r1 + r2) {\n    return 0;\n  }\n\n  // completely overlapped\n  if (d <= Math.abs(r1 - r2)) {\n    return Math.PI * Math.min(r1, r2) * Math.min(r1, r2);\n  }\n\n  const w1 = r1 - (d * d - r2 * r2 + r1 * r1) / (2 * d);\n  const w2 = r2 - (d * d - r1 * r1 + r2 * r2) / (2 * d);\n  return circleArea(r1, w1) + circleArea(r2, w2);\n}\n\n/**\n * Given two circles (containing a x/y/radius attributes),\n * returns the intersecting points if possible\n * note: doesn't handle cases where there are infinitely many\n * intersection points (circles are equivalent):, or only one intersection point\n * @param {{x: number, y: number, radius: number}} p1\n * @param {{x: number, y: number, radius: number}} p2\n * @returns {ReadonlyArray<{x: number, y: number}>}\n **/\nfunction circleCircleIntersection(p1, p2) {\n  const d = distance(p1, p2);\n  const r1 = p1.radius;\n  const r2 = p2.radius;\n\n  // if to far away, or self contained - can't be done\n  if (d >= r1 + r2 || d <= Math.abs(r1 - r2)) {\n    return [];\n  }\n\n  const a = (r1 * r1 - r2 * r2 + d * d) / (2 * d);\n  const h = Math.sqrt(r1 * r1 - a * a);\n  const x0 = p1.x + (a * (p2.x - p1.x)) / d;\n  const y0 = p1.y + (a * (p2.y - p1.y)) / d;\n  const rx = -(p2.y - p1.y) * (h / d);\n  const ry = -(p2.x - p1.x) * (h / d);\n\n  return [\n    { x: x0 + rx, y: y0 - ry },\n    { x: x0 - rx, y: y0 + ry },\n  ];\n}\n\n/**\n * Returns the center of a bunch of points\n * @param {ReadonlyArray<{x: number, y: number}>} points\n * @returns {{x: number, y: number}}\n */\nfunction getCenter(points) {\n  const center = { x: 0, y: 0 };\n  for (const point of points) {\n    center.x += point.x;\n    center.y += point.y;\n  }\n  center.x /= points.length;\n  center.y /= points.length;\n  return center;\n}\n\n/**\n * given a list of set objects, and their corresponding overlaps\n * updates the (x, y, radius) attribute on each set such that their positions\n * roughly correspond to the desired overlaps\n * @param {readonly {sets: readonly string[]; size: number; weight?: number}[]} sets\n * @returns {{[setid: string]: {x: number, y: number, radius: number}}}\n */\nfunction venn(sets, parameters = {}) {\n  parameters.maxIterations = parameters.maxIterations || 500;\n\n  const initialLayout = parameters.initialLayout || bestInitialLayout;\n  const loss = parameters.lossFunction || lossFunction;\n\n  // add in missing pairwise areas as having 0 size\n  const areas = addMissingAreas(sets, parameters);\n\n  // initial layout is done greedily\n  const circles = initialLayout(areas, parameters);\n\n  // transform x/y coordinates to a vector to optimize\n  const setids = Object.keys(circles);\n  /** @type {number[]} */\n  const initial = [];\n  for (const setid of setids) {\n    initial.push(circles[setid].x);\n    initial.push(circles[setid].y);\n  }\n\n  // optimize initial layout from our loss function\n  const solution = nelderMead(\n    (values) => {\n      const current = {};\n      for (let i = 0; i < setids.length; ++i) {\n        const setid = setids[i];\n        current[setid] = {\n          x: values[2 * i],\n          y: values[2 * i + 1],\n          radius: circles[setid].radius,\n          // size : circles[setid].size\n        };\n      }\n      return loss(current, areas);\n    },\n    initial,\n    parameters\n  );\n\n  // transform solution vector back to x/y points\n  const positions = solution.x;\n  for (let i = 0; i < setids.length; ++i) {\n    const setid = setids[i];\n    circles[setid].x = positions[2 * i];\n    circles[setid].y = positions[2 * i + 1];\n  }\n\n  return circles;\n}\n\nconst SMALL = 1e-10;\n\n/**\n * Returns the distance necessary for two circles of radius r1 + r2 to\n * have the overlap area 'overlap'\n * @param {number} r1\n * @param {number} r2\n * @param {number} overlap\n * @returns {number}\n */\nfunction distanceFromIntersectArea(r1, r2, overlap) {\n  // handle complete overlapped circles\n  if (Math.min(r1, r2) * Math.min(r1, r2) * Math.PI <= overlap + SMALL) {\n    return Math.abs(r1 - r2);\n  }\n\n  return bisect((distance) => circleOverlap(r1, r2, distance) - overlap, 0, r1 + r2);\n}\n\n/**\n * Missing pair-wise intersection area data can cause problems:\n * treating as an unknown means that sets will be laid out overlapping,\n * which isn't what people expect. To reflect that we want disjoint sets\n * here, set the overlap to 0 for all missing pairwise set intersections\n * @param {ReadonlyArray<{sets: ReadonlyArray<string>, size: number}>} areas\n * @returns {ReadonlyArray<{sets: ReadonlyArray<string>, size: number}>}\n */\nfunction addMissingAreas(areas, parameters = {}) {\n  const distinct = parameters.distinct;\n  const r = areas.map((s) => Object.assign({}, s));\n\n  function toKey(arr) {\n    return arr.join(';');\n  }\n\n  if (distinct) {\n    // recreate the full ones by adding things up but just to level two since the rest doesn't matter\n    /** @types Map<string, number> */\n    const count = new Map();\n    for (const area of r) {\n      for (let i = 0; i < area.sets.length; i++) {\n        const si = String(area.sets[i]);\n        count.set(si, area.size + (count.get(si) || 0));\n        for (let j = i + 1; j < area.sets.length; j++) {\n          const sj = String(area.sets[j]);\n          const k1 = `${si};${sj}`;\n          const k2 = `${sj};${si}`;\n          count.set(k1, area.size + (count.get(k1) || 0));\n          count.set(k2, area.size + (count.get(k2) || 0));\n        }\n      }\n    }\n    for (const area of r) {\n      if (area.sets.length < 3) {\n        area.size = count.get(toKey(area.sets));\n      }\n    }\n  }\n\n  // two circle intersections that aren't defined\n  const ids = [];\n\n  /** @type {Set<string>} */\n  const pairs = new Set();\n  for (const area of r) {\n    if (area.sets.length === 1) {\n      ids.push(area.sets[0]);\n    } else if (area.sets.length === 2) {\n      const a = area.sets[0];\n      const b = area.sets[1];\n      pairs.add(toKey(area.sets));\n      pairs.add(toKey([b, a]));\n    }\n  }\n\n  ids.sort((a, b) => (a === b ? 0 : a < b ? -1 : +1));\n\n  for (let i = 0; i < ids.length; ++i) {\n    const a = ids[i];\n    for (let j = i + 1; j < ids.length; ++j) {\n      const b = ids[j];\n      if (!pairs.has(toKey([a, b]))) {\n        r.push({ sets: [a, b], size: 0 });\n      }\n    }\n  }\n  return r;\n}\n\n/**\n * Returns two matrices, one of the euclidean distances between the sets\n * and the other indicating if there are subset or disjoint set relationships\n * @param {ReadonlyArray<{sets: ReadonlyArray<number>}>} areas\n * @param {ReadonlyArray<{size: number}>} sets\n * @param {ReadonlyArray<number>} setids\n */\nfunction getDistanceMatrices(areas, sets, setids) {\n  // initialize an empty distance matrix between all the points\n  /**\n   * @type {number[][]}\n   */\n  const distances = zerosM(sets.length, sets.length);\n  /**\n   * @type {number[][]}\n   */\n  const constraints = zerosM(sets.length, sets.length);\n\n  // compute required distances between all the sets such that\n  // the areas match\n  areas\n    .filter((x) => x.sets.length === 2)\n    .forEach((current) => {\n      const left = setids[current.sets[0]];\n      const right = setids[current.sets[1]];\n      const r1 = Math.sqrt(sets[left].size / Math.PI);\n      const r2 = Math.sqrt(sets[right].size / Math.PI);\n      const distance = distanceFromIntersectArea(r1, r2, current.size);\n\n      distances[left][right] = distances[right][left] = distance;\n\n      // also update constraints to indicate if its a subset or disjoint\n      // relationship\n      let c = 0;\n      if (current.size + 1e-10 >= Math.min(sets[left].size, sets[right].size)) {\n        c = 1;\n      } else if (current.size <= 1e-10) {\n        c = -1;\n      }\n      constraints[left][right] = constraints[right][left] = c;\n    });\n\n  return { distances, constraints };\n}\n\n/// computes the gradient and loss simultaneously for our constrained MDS optimizer\nfunction constrainedMDSGradient(x, fxprime, distances, constraints) {\n  for (let i = 0; i < fxprime.length; ++i) {\n    fxprime[i] = 0;\n  }\n\n  let loss = 0;\n  for (let i = 0; i < distances.length; ++i) {\n    const xi = x[2 * i];\n    const yi = x[2 * i + 1];\n    for (let j = i + 1; j < distances.length; ++j) {\n      const xj = x[2 * j];\n      const yj = x[2 * j + 1];\n      const dij = distances[i][j];\n      const constraint = constraints[i][j];\n\n      const squaredDistance = (xj - xi) * (xj - xi) + (yj - yi) * (yj - yi);\n      const distance = Math.sqrt(squaredDistance);\n      const delta = squaredDistance - dij * dij;\n\n      if ((constraint > 0 && distance <= dij) || (constraint < 0 && distance >= dij)) {\n        continue;\n      }\n\n      loss += 2 * delta * delta;\n\n      fxprime[2 * i] += 4 * delta * (xi - xj);\n      fxprime[2 * i + 1] += 4 * delta * (yi - yj);\n\n      fxprime[2 * j] += 4 * delta * (xj - xi);\n      fxprime[2 * j + 1] += 4 * delta * (yj - yi);\n    }\n  }\n  return loss;\n}\n\n/**\n * takes the best working variant of either constrained MDS or greedy\n * @param {ReadonlyArray<{sets: ReadonlyArray<string>, size: number}>} areas\n */\nfunction bestInitialLayout(areas, params = {}) {\n  let initial = greedyLayout(areas, params);\n  const loss = params.lossFunction || lossFunction;\n\n  // greedylayout is sufficient for all 2/3 circle cases. try out\n  // constrained MDS for higher order problems, take its output\n  // if it outperforms. (greedy is aesthetically better on 2/3 circles\n  // since it axis aligns)\n  if (areas.length >= 8) {\n    const constrained = constrainedMDSLayout(areas, params);\n    const constrainedLoss = loss(constrained, areas);\n    const greedyLoss = loss(initial, areas);\n\n    if (constrainedLoss + 1e-8 < greedyLoss) {\n      initial = constrained;\n    }\n  }\n  return initial;\n}\n\n/**\n * use the constrained MDS variant to generate an initial layout\n * @param {ReadonlyArray<{sets: ReadonlyArray<string>, size: number}>} areas\n * @returns {{[key: string]: {x: number, y: number, radius: number}}}\n */\nfunction constrainedMDSLayout(areas, params = {}) {\n  const restarts = params.restarts || 10;\n\n  // bidirectionally map sets to a rowid  (so we can create a matrix)\n  const sets = [];\n  const setids = {};\n  for (const area of areas) {\n    if (area.sets.length === 1) {\n      setids[area.sets[0]] = sets.length;\n      sets.push(area);\n    }\n  }\n\n  let { distances, constraints } = getDistanceMatrices(areas, sets, setids);\n\n  // keep distances bounded, things get messed up otherwise.\n  // TODO: proper preconditioner?\n  const norm = norm2(distances.map(norm2)) / distances.length;\n  distances = distances.map((row) => row.map((value) => value / norm));\n\n  const obj = (x, fxprime) => constrainedMDSGradient(x, fxprime, distances, constraints);\n\n  let best = null;\n  for (let i = 0; i < restarts; ++i) {\n    const initial = zeros(distances.length * 2).map(Math.random);\n\n    const current = conjugateGradient(obj, initial, params);\n    if (!best || current.fx < best.fx) {\n      best = current;\n    }\n  }\n\n  const positions = best.x;\n\n  // translate rows back to (x,y,radius) coordinates\n  /** @type {{[key: string]: {x: number, y: number, radius: number}}} */\n  const circles = {};\n  for (let i = 0; i < sets.length; ++i) {\n    const set = sets[i];\n    circles[set.sets[0]] = {\n      x: positions[2 * i] * norm,\n      y: positions[2 * i + 1] * norm,\n      radius: Math.sqrt(set.size / Math.PI),\n    };\n  }\n\n  if (params.history) {\n    for (const h of params.history) {\n      scale(h.x, norm);\n    }\n  }\n  return circles;\n}\n\n/**\n * Lays out a Venn diagram greedily, going from most overlapped sets to\n * least overlapped, attempting to position each new set such that the\n * overlapping areas to already positioned sets are basically right\n * @param {ReadonlyArray<{size: number, sets: ReadonlyArray<string>}>} areas\n * @return {{[key: string]: {x: number, y: number, radius: number}}}\n */\nfunction greedyLayout(areas, params) {\n  const loss = params && params.lossFunction ? params.lossFunction : lossFunction;\n\n  // define a circle for each set\n  /** @type {{[key: string]: {x: number, y: number, radius: number}}} */\n  const circles = {};\n  /** @type {{[key: string]: {set: string, size: number, weight: number}[]}} */\n  const setOverlaps = {};\n  for (const area of areas) {\n    if (area.sets.length === 1) {\n      const set = area.sets[0];\n      circles[set] = {\n        x: 1e10,\n        y: 1e10,\n        rowid: circles.length,\n        size: area.size,\n        radius: Math.sqrt(area.size / Math.PI),\n      };\n      setOverlaps[set] = [];\n    }\n  }\n\n  areas = areas.filter((a) => a.sets.length === 2);\n\n  // map each set to a list of all the other sets that overlap it\n  for (const current of areas) {\n    let weight = current.weight != null ? current.weight : 1.0;\n    const left = current.sets[0];\n    const right = current.sets[1];\n\n    // completely overlapped circles shouldn't be positioned early here\n    if (current.size + SMALL >= Math.min(circles[left].size, circles[right].size)) {\n      weight = 0;\n    }\n\n    setOverlaps[left].push({ set: right, size: current.size, weight });\n    setOverlaps[right].push({ set: left, size: current.size, weight });\n  }\n\n  // get list of most overlapped sets\n  const mostOverlapped = [];\n  Object.keys(setOverlaps).forEach((set) => {\n    let size = 0;\n    for (let i = 0; i < setOverlaps[set].length; ++i) {\n      size += setOverlaps[set][i].size * setOverlaps[set][i].weight;\n    }\n\n    mostOverlapped.push({ set, size });\n  });\n\n  // sort by size desc\n  function sortOrder(a, b) {\n    return b.size - a.size;\n  }\n  mostOverlapped.sort(sortOrder);\n\n  // keep track of what sets have been laid out\n  const positioned = {};\n  function isPositioned(element) {\n    return element.set in positioned;\n  }\n\n  /**\n   * adds a point to the output\n   * @param {{x: number, y: number}} point\n   * @param {number} index\n   */\n  function positionSet(point, index) {\n    circles[index].x = point.x;\n    circles[index].y = point.y;\n    positioned[index] = true;\n  }\n\n  // add most overlapped set at (0,0)\n  positionSet({ x: 0, y: 0 }, mostOverlapped[0].set);\n\n  // get distances between all points. TODO, necessary?\n  // answer: probably not\n  // var distances = venn.getDistanceMatrices(circles, areas).distances;\n  for (let i = 1; i < mostOverlapped.length; ++i) {\n    const setIndex = mostOverlapped[i].set;\n    const overlap = setOverlaps[setIndex].filter(isPositioned);\n    const set = circles[setIndex];\n    overlap.sort(sortOrder);\n\n    if (overlap.length === 0) {\n      // this shouldn't happen anymore with addMissingAreas\n      throw 'ERROR: missing pairwise overlap information';\n    }\n\n    /** @type {{x: number, y: number}[]} */\n    const points = [];\n    for (var j = 0; j < overlap.length; ++j) {\n      // get appropriate distance from most overlapped already added set\n      const p1 = circles[overlap[j].set];\n      const d1 = distanceFromIntersectArea(set.radius, p1.radius, overlap[j].size);\n\n      // sample positions at 90 degrees for maximum aesthetics\n      points.push({ x: p1.x + d1, y: p1.y });\n      points.push({ x: p1.x - d1, y: p1.y });\n      points.push({ y: p1.y + d1, x: p1.x });\n      points.push({ y: p1.y - d1, x: p1.x });\n\n      // if we have at least 2 overlaps, then figure out where the\n      // set should be positioned analytically and try those too\n      for (let k = j + 1; k < overlap.length; ++k) {\n        const p2 = circles[overlap[k].set];\n        const d2 = distanceFromIntersectArea(set.radius, p2.radius, overlap[k].size);\n\n        const extraPoints = circleCircleIntersection(\n          { x: p1.x, y: p1.y, radius: d1 },\n          { x: p2.x, y: p2.y, radius: d2 }\n        );\n        points.push(...extraPoints);\n      }\n    }\n\n    // we have some candidate positions for the set, examine loss\n    // at each position to figure out where to put it at\n    let bestLoss = 1e50;\n    let bestPoint = points[0];\n    for (const point of points) {\n      circles[setIndex].x = point.x;\n      circles[setIndex].y = point.y;\n      const localLoss = loss(circles, areas);\n      if (localLoss < bestLoss) {\n        bestLoss = localLoss;\n        bestPoint = point;\n      }\n    }\n\n    positionSet(bestPoint, setIndex);\n  }\n\n  return circles;\n}\n\n/**\n * Given a bunch of sets, and the desired overlaps between these sets - computes\n * the distance from the actual overlaps to the desired overlaps. Note that\n * this method ignores overlaps of more than 2 circles\n * @param {{[key: string]: <{x: number, y: number, radius: number}>}} circles\n * @param {ReadonlyArray<{size: number, sets: ReadonlyArray<string>, weight?: number}>} overlaps\n * @returns {number}\n */\nfunction lossFunction(circles, overlaps) {\n  let output = 0;\n\n  for (const area of overlaps) {\n    if (area.sets.length === 1) {\n      continue;\n    }\n    /** @type {number} */\n    let overlap;\n    if (area.sets.length === 2) {\n      const left = circles[area.sets[0]];\n      const right = circles[area.sets[1]];\n      overlap = circleOverlap(left.radius, right.radius, distance(left, right));\n    } else {\n      overlap = intersectionArea(area.sets.map((d) => circles[d]));\n    }\n\n    const weight = area.weight != null ? area.weight : 1.0;\n    output += weight * (overlap - area.size) * (overlap - area.size);\n  }\n\n  return output;\n}\n\nfunction logRatioLossFunction(circles, overlaps) {\n  let output = 0;\n\n  for (const area of overlaps) {\n    if (area.sets.length === 1) {\n      continue;\n    }\n    /** @type {number} */\n    let overlap;\n    if (area.sets.length === 2) {\n      const left = circles[area.sets[0]];\n      const right = circles[area.sets[1]];\n      overlap = circleOverlap(left.radius, right.radius, distance(left, right));\n    } else {\n      overlap = intersectionArea(area.sets.map((d) => circles[d]));\n    }\n\n    const weight = area.weight != null ? area.weight : 1.0;\n    const differenceFromIdeal = Math.log((overlap + 1) / (area.size + 1));\n    output += weight * differenceFromIdeal * differenceFromIdeal;\n  }\n\n  return output;\n}\n\n/**\n * orientates a bunch of circles to point in orientation\n * @param {{x :number, y: number, radius: number}[]} circles\n * @param {number | undefined} orientation\n * @param {((a: {x :number, y: number, radius: number}, b: {x :number, y: number, radius: number}) => number) | undefined} orientationOrder\n */\nfunction orientateCircles(circles, orientation, orientationOrder) {\n  if (orientationOrder == null) {\n    circles.sort((a, b) => b.radius - a.radius);\n  } else {\n    circles.sort(orientationOrder);\n  }\n\n  // shift circles so largest circle is at (0, 0)\n  if (circles.length > 0) {\n    const largestX = circles[0].x;\n    const largestY = circles[0].y;\n\n    for (const circle of circles) {\n      circle.x -= largestX;\n      circle.y -= largestY;\n    }\n  }\n\n  if (circles.length === 2) {\n    // if the second circle is a subset of the first, arrange so that\n    // it is off to one side. hack for https://github.com/benfred/venn.js/issues/120\n    const dist = distance(circles[0], circles[1]);\n    if (dist < Math.abs(circles[1].radius - circles[0].radius)) {\n      circles[1].x = circles[0].x + circles[0].radius - circles[1].radius - 1e-10;\n      circles[1].y = circles[0].y;\n    }\n  }\n\n  // rotate circles so that second largest is at an angle of 'orientation'\n  // from largest\n  if (circles.length > 1) {\n    const rotation = Math.atan2(circles[1].x, circles[1].y) - orientation;\n    const c = Math.cos(rotation);\n    const s = Math.sin(rotation);\n\n    for (const circle of circles) {\n      const x = circle.x;\n      const y = circle.y;\n      circle.x = c * x - s * y;\n      circle.y = s * x + c * y;\n    }\n  }\n\n  // mirror solution if third solution is above plane specified by\n  // first two circles\n  if (circles.length > 2) {\n    let angle = Math.atan2(circles[2].x, circles[2].y) - orientation;\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    if (angle > Math.PI) {\n      const slope = circles[1].y / (1e-10 + circles[1].x);\n      for (const circle of circles) {\n        var d = (circle.x + slope * circle.y) / (1 + slope * slope);\n        circle.x = 2 * d - circle.x;\n        circle.y = 2 * d * slope - circle.y;\n      }\n    }\n  }\n}\n\n/**\n *\n * @param {ReadonlyArray<{x: number, y: number, radius: number}>} circles\n * @returns {{x: number, y: number, radius: number}[][]}\n */\nfunction disjointCluster(circles) {\n  // union-find clustering to get disjoint sets\n  circles.forEach((circle) => {\n    circle.parent = circle;\n  });\n\n  // path compression step in union find\n  function find(circle) {\n    if (circle.parent !== circle) {\n      circle.parent = find(circle.parent);\n    }\n    return circle.parent;\n  }\n\n  function union(x, y) {\n    const xRoot = find(x);\n    const yRoot = find(y);\n    xRoot.parent = yRoot;\n  }\n\n  // get the union of all overlapping sets\n  for (let i = 0; i < circles.length; ++i) {\n    for (let j = i + 1; j < circles.length; ++j) {\n      const maxDistance = circles[i].radius + circles[j].radius;\n      if (distance(circles[i], circles[j]) + 1e-10 < maxDistance) {\n        union(circles[j], circles[i]);\n      }\n    }\n  }\n\n  // find all the disjoint clusters and group them together\n  /** @type {Map<string, {x: number, y: number, radius: number}[]>} */\n  const disjointClusters = new Map();\n  for (let i = 0; i < circles.length; ++i) {\n    const setid = find(circles[i]).parent.setid;\n    if (!disjointClusters.has(setid)) {\n      disjointClusters.set(setid, []);\n    }\n    disjointClusters.get(setid).push(circles[i]);\n  }\n\n  // cleanup bookkeeping\n  circles.forEach((circle) => {\n    delete circle.parent;\n  });\n\n  // return in more usable form\n  return Array.from(disjointClusters.values());\n}\n\n/**\n * @param {ReadonlyArray<{x :number, y: number, radius: number}>} circles\n * @returns {{xRange: [number, number], yRange: [number, number]}}\n */\nfunction getBoundingBox(circles) {\n  const minMax = (d) => {\n    const hi = circles.reduce((acc, c) => Math.max(acc, c[d] + c.radius), Number.NEGATIVE_INFINITY);\n    const lo = circles.reduce((acc, c) => Math.min(acc, c[d] - c.radius), Number.POSITIVE_INFINITY);\n    return { max: hi, min: lo };\n  };\n  return { xRange: minMax('x'), yRange: minMax('y') };\n}\n\n/**\n *\n * @param {{[setid: string]: {x: number, y: number, radius: number}}} solution\n * @param {undefined | number} orientation\n * @param {((a: {x :number, y: number, radius: number}, b: {x :number, y: number, radius: number}) => number) | undefined} orientationOrder\n * @returns {{[setid: string]: {x: number, y: number, radius: number}}}\n */\nfunction normalizeSolution(solution, orientation, orientationOrder) {\n  if (orientation == null) {\n    orientation = Math.PI / 2;\n  }\n\n  // work with a list instead of a dictionary, and take a copy so we\n  // don't mutate input\n  let circles = fromObjectNotation(solution).map((d) => Object.assign({}, d));\n\n  // get all the disjoint clusters\n  const clusters = disjointCluster(circles);\n\n  // orientate all disjoint sets, get sizes\n  for (const cluster of clusters) {\n    orientateCircles(cluster, orientation, orientationOrder);\n    const bounds = getBoundingBox(cluster);\n    cluster.size = (bounds.xRange.max - bounds.xRange.min) * (bounds.yRange.max - bounds.yRange.min);\n    cluster.bounds = bounds;\n  }\n  clusters.sort((a, b) => b.size - a.size);\n\n  // orientate the largest at 0,0, and get the bounds\n  circles = clusters[0];\n  let returnBounds = circles.bounds;\n  const spacing = (returnBounds.xRange.max - returnBounds.xRange.min) / 50;\n\n  /**\n   * @param {ReadonlyArray<{x: number, y: number, radius: number, setid: string}>} cluster\n   * @param {boolean} right\n   * @param {boolean} bottom\n   */\n  function addCluster(cluster, right, bottom) {\n    if (!cluster) {\n      return;\n    }\n\n    const bounds = cluster.bounds;\n    /** @type {number} */\n    let xOffset;\n    /** @type {number} */\n    let yOffset;\n\n    if (right) {\n      xOffset = returnBounds.xRange.max - bounds.xRange.min + spacing;\n    } else {\n      xOffset = returnBounds.xRange.max - bounds.xRange.max;\n      const centreing =\n        (bounds.xRange.max - bounds.xRange.min) / 2 - (returnBounds.xRange.max - returnBounds.xRange.min) / 2;\n      if (centreing < 0) {\n        xOffset += centreing;\n      }\n    }\n\n    if (bottom) {\n      yOffset = returnBounds.yRange.max - bounds.yRange.min + spacing;\n    } else {\n      yOffset = returnBounds.yRange.max - bounds.yRange.max;\n      const centreing =\n        (bounds.yRange.max - bounds.yRange.min) / 2 - (returnBounds.yRange.max - returnBounds.yRange.min) / 2;\n      if (centreing < 0) {\n        yOffset += centreing;\n      }\n    }\n\n    for (const c of cluster) {\n      c.x += xOffset;\n      c.y += yOffset;\n      circles.push(c);\n    }\n  }\n\n  let index = 1;\n  while (index < clusters.length) {\n    addCluster(clusters[index], true, false);\n    addCluster(clusters[index + 1], false, true);\n    addCluster(clusters[index + 2], true, true);\n    index += 3;\n\n    // have one cluster (in top left). lay out next three relative\n    // to it in a grid\n    returnBounds = getBoundingBox(circles);\n  }\n\n  // convert back to solution form\n  return toObjectNotation(circles);\n}\n\n/**\n * Scales a solution from venn.venn or venn.greedyLayout such that it fits in\n * a rectangle of width/height - with padding around the borders. also\n * centers the diagram in the available space at the same time.\n * If the scale parameter is not null, this automatic scaling is ignored in favor of this custom one\n * @param {{[setid: string]: {x: number, y: number, radius: number}}} solution\n * @param {number} width\n * @param {number} height\n * @param {number} padding\n * @param {boolean} scaleToFit\n * @returns {{[setid: string]: {x: number, y: number, radius: number}}}\n */\nfunction scaleSolution(solution, width, height, padding, scaleToFit) {\n  const circles = fromObjectNotation(solution);\n\n  width -= 2 * padding;\n  height -= 2 * padding;\n\n  const { xRange, yRange } = getBoundingBox(circles);\n\n  if (xRange.max === xRange.min || yRange.max === yRange.min) {\n    console.log('not scaling solution: zero size detected');\n    return solution;\n  }\n\n  /** @type {number} */\n  let xScaling;\n  /** @type {number} */\n  let yScaling;\n  if (scaleToFit) {\n    const toScaleDiameter = Math.sqrt(scaleToFit / Math.PI) * 2;\n    xScaling = width / toScaleDiameter;\n    yScaling = height / toScaleDiameter;\n  } else {\n    xScaling = width / (xRange.max - xRange.min);\n    yScaling = height / (yRange.max - yRange.min);\n  }\n\n  const scaling = Math.min(yScaling, xScaling);\n  // while we're at it, center the diagram too\n  const xOffset = (width - (xRange.max - xRange.min) * scaling) / 2;\n  const yOffset = (height - (yRange.max - yRange.min) * scaling) / 2;\n\n  return toObjectNotation(\n    circles.map((circle) => ({\n      radius: scaling * circle.radius,\n      x: padding + xOffset + (circle.x - xRange.min) * scaling,\n      y: padding + yOffset + (circle.y - yRange.min) * scaling,\n      setid: circle.setid,\n    }))\n  );\n}\n\n/**\n * @param {readonly {x: number, y: number, radius: number, setid: string}[]} circles\n * @returns {{[setid: string]: {x: number, y: number, radius: number, setid: string}}}\n */\nfunction toObjectNotation(circles) {\n  /** @type {{[setid: string]: {x: number, y: number, radius: number, setid: string}}} */\n  const r = {};\n  for (const circle of circles) {\n    r[circle.setid] = circle;\n  }\n  return r;\n}\n/**\n * @param {{[setid: string]: {x: number, y: number, radius: number}}} solution\n * @returns {{x: number, y: number, radius: number, setid: string}[]}}\n */\nfunction fromObjectNotation(solution) {\n  const setids = Object.keys(solution);\n  return setids.map((id) => Object.assign(solution[id], { setid: id }));\n}\n\n/*global console:true*/\n\n/**\n * VennDiagram includes an optional `options` parameter containing the following option(s):\n *\n * `colourScheme: Array<String>`\n * A list of color values to be applied when coloring diagram circles.\n *\n * `symmetricalTextCentre: Boolean`\n * Whether to symmetrically center each circle's text horizontally and vertically.\n * Defaults to `false`.\n *\n * `textFill: String`\n * The color to be applied to the text within each circle.\n *\n * @param {object} options\n */\nfunction VennDiagram(options = {}) {\n  let useViewBox = false,\n    width = 600,\n    height = 350,\n    padding = 15,\n    duration = 1000,\n    orientation = Math.PI / 2,\n    normalize = true,\n    scaleToFit = null,\n    wrap = true,\n    styled = true,\n    fontSize = null,\n    orientationOrder = null,\n    distinct = false,\n    round = null,\n    symmetricalTextCentre = options && options.symmetricalTextCentre ? options.symmetricalTextCentre : false,\n    // mimic the behaviour of d3.scale.category10 from the previous\n    // version of d3\n    colourMap = {},\n    // so this is the same as d3.schemeCategory10, which is only defined in d3 4.0\n    // since we can support older versions of d3 as long as we don't force this,\n    // I'm hackily redefining below. TODO: remove this and change to d3.schemeCategory10\n    colourScheme =\n      options && options.colourScheme\n        ? options.colourScheme\n        : options && options.colorScheme\n        ? options.colorScheme\n        : [\n            '#1f77b4',\n            '#ff7f0e',\n            '#2ca02c',\n            '#d62728',\n            '#9467bd',\n            '#8c564b',\n            '#e377c2',\n            '#7f7f7f',\n            '#bcbd22',\n            '#17becf',\n          ],\n    colourIndex = 0,\n    colours = function (key) {\n      if (key in colourMap) {\n        return colourMap[key];\n      }\n      var ret = (colourMap[key] = colourScheme[colourIndex]);\n      colourIndex += 1;\n      if (colourIndex >= colourScheme.length) {\n        colourIndex = 0;\n      }\n      return ret;\n    },\n    layoutFunction = venn,\n    loss = lossFunction;\n\n  function chart(selection) {\n    let data = selection.datum();\n\n    // handle 0-sized sets by removing from input\n    const toRemove = new Set();\n    data.forEach((datum) => {\n      if (datum.size == 0 && datum.sets.length == 1) {\n        toRemove.add(datum.sets[0]);\n      }\n    });\n    data = data.filter((datum) => !datum.sets.some((set) => toRemove.has(set)));\n\n    let circles = {};\n    let textCentres = {};\n\n    if (data.length > 0) {\n      let solution = layoutFunction(data, { lossFunction: loss, distinct });\n\n      if (normalize) {\n        solution = normalizeSolution(solution, orientation, orientationOrder);\n      }\n\n      circles = scaleSolution(solution, width, height, padding, scaleToFit);\n      textCentres = computeTextCentres(circles, data, symmetricalTextCentre);\n    }\n\n    // Figure out the current label for each set. These can change\n    // and D3 won't necessarily update (fixes https://github.com/benfred/venn.js/issues/103)\n    const labels = {};\n    data.forEach((datum) => {\n      if (datum.label) {\n        labels[datum.sets] = datum.label;\n      }\n    });\n\n    function label(d) {\n      if (d.sets in labels) {\n        return labels[d.sets];\n      }\n      if (d.sets.length == 1) {\n        return '' + d.sets[0];\n      }\n    }\n\n    // create svg if not already existing\n    selection.selectAll('svg').data([circles]).enter().append('svg');\n\n    const svg = selection.select('svg');\n\n    if (useViewBox) {\n      svg.attr('viewBox', `0 0 ${width} ${height}`);\n    } else {\n      svg.attr('width', width).attr('height', height);\n    }\n\n    // to properly transition intersection areas, we need the\n    // previous circles locations. load from elements\n    const previous = {};\n    let hasPrevious = false;\n    svg.selectAll('.venn-area path').each(function (d) {\n      const path = this.getAttribute('d');\n      if (d.sets.length == 1 && path && !distinct) {\n        hasPrevious = true;\n        previous[d.sets[0]] = circleFromPath(path);\n      }\n    });\n    // interpolate intersection area paths between previous and\n    // current paths\n    function pathTween(d) {\n      return (t) => {\n        const c = d.sets.map((set) => {\n          let start = previous[set];\n          let end = circles[set];\n          if (!start) {\n            start = { x: width / 2, y: height / 2, radius: 1 };\n          }\n          if (!end) {\n            end = { x: width / 2, y: height / 2, radius: 1 };\n          }\n          return {\n            x: start.x * (1 - t) + end.x * t,\n            y: start.y * (1 - t) + end.y * t,\n            radius: start.radius * (1 - t) + end.radius * t,\n          };\n        });\n        return intersectionAreaPath(c, round);\n      };\n    }\n\n    // update data, joining on the set ids\n    const nodes = svg.selectAll('.venn-area').data(data, (d) => d.sets);\n\n    // create new nodes\n    const enter = nodes\n      .enter()\n      .append('g')\n      .attr(\n        'class',\n        (d) =>\n          `venn-area venn-${d.sets.length == 1 ? 'circle' : 'intersection'}${\n            d.colour || d.color ? ' venn-coloured' : ''\n          }`\n      )\n      .attr('data-venn-sets', (d) => d.sets.join('_'));\n\n    const enterPath = enter.append('path');\n    const enterText = enter\n      .append('text')\n      .attr('class', 'label')\n      .text((d) => label(d))\n      .attr('text-anchor', 'middle')\n      .attr('dy', '.35em')\n      .attr('x', width / 2)\n      .attr('y', height / 2);\n\n    // apply minimal style if wanted\n    if (styled) {\n      enterPath\n        .style('fill-opacity', '0')\n        .filter((d) => d.sets.length == 1)\n        .style('fill', (d) => (d.colour ? d.colour : d.color ? d.color : colours(d.sets)))\n        .style('fill-opacity', '.25');\n\n      enterText.style('fill', (d) => {\n        if (d.colour || d.color) {\n          return '#FFF';\n        }\n        if (options.textFill) {\n          return options.textFill;\n        }\n        return d.sets.length == 1 ? colours(d.sets) : '#444';\n      });\n    }\n\n    function asTransition(s) {\n      if (typeof s.transition === 'function') {\n        return s.transition('venn').duration(duration);\n      }\n      return s;\n    }\n\n    // update existing, using pathTween if necessary\n    let update = selection;\n    if (hasPrevious && typeof update.transition === 'function') {\n      update = asTransition(selection);\n      update.selectAll('path').attrTween('d', pathTween);\n    } else {\n      update.selectAll('path').attr('d', (d) => intersectionAreaPath(d.sets.map((set) => circles[set])), round);\n    }\n\n    const updateText = update\n      .selectAll('text')\n      .filter((d) => d.sets in textCentres)\n      .text((d) => label(d))\n      .attr('x', (d) => Math.floor(textCentres[d.sets].x))\n      .attr('y', (d) => Math.floor(textCentres[d.sets].y));\n\n    if (wrap) {\n      if (hasPrevious) {\n        // d3 4.0 uses 'on' for events on transitions,\n        // but d3 3.0 used 'each' instead. switch appropriately\n        if ('on' in updateText) {\n          updateText.on('end', wrapText(circles, label));\n        } else {\n          updateText.each('end', wrapText(circles, label));\n        }\n      } else {\n        updateText.each(wrapText(circles, label));\n      }\n    }\n\n    // remove old\n    const exit = asTransition(nodes.exit()).remove();\n    if (typeof nodes.transition === 'function') {\n      exit.selectAll('path').attrTween('d', pathTween);\n    }\n\n    const exitText = exit\n      .selectAll('text')\n      .attr('x', width / 2)\n      .attr('y', height / 2);\n\n    // if we've been passed a fontSize explicitly, use it to\n    // transition\n    if (fontSize !== null) {\n      enterText.style('font-size', '0px');\n      updateText.style('font-size', fontSize);\n      exitText.style('font-size', '0px');\n    }\n\n    return { circles, textCentres, nodes, enter, update, exit };\n  }\n\n  chart.wrap = function (_) {\n    if (!arguments.length) return wrap;\n    wrap = _;\n    return chart;\n  };\n\n  chart.useViewBox = function () {\n    useViewBox = true;\n    return chart;\n  };\n\n  chart.width = function (_) {\n    if (!arguments.length) return width;\n    width = _;\n    return chart;\n  };\n\n  chart.height = function (_) {\n    if (!arguments.length) return height;\n    height = _;\n    return chart;\n  };\n\n  chart.padding = function (_) {\n    if (!arguments.length) return padding;\n    padding = _;\n    return chart;\n  };\n\n  chart.distinct = function (_) {\n    if (!arguments.length) return distinct;\n    distinct = _;\n    return chart;\n  };\n\n  chart.colours = function (_) {\n    if (!arguments.length) return colours;\n    colours = _;\n    return chart;\n  };\n\n  chart.colors = function (_) {\n    if (!arguments.length) return colors;\n    colours = _;\n    return chart;\n  };\n\n  chart.fontSize = function (_) {\n    if (!arguments.length) return fontSize;\n    fontSize = _;\n    return chart;\n  };\n\n  chart.round = function (_) {\n    if (!arguments.length) return round;\n    round = _;\n    return chart;\n  };\n\n  chart.duration = function (_) {\n    if (!arguments.length) return duration;\n    duration = _;\n    return chart;\n  };\n\n  chart.layoutFunction = function (_) {\n    if (!arguments.length) return layoutFunction;\n    layoutFunction = _;\n    return chart;\n  };\n\n  chart.normalize = function (_) {\n    if (!arguments.length) return normalize;\n    normalize = _;\n    return chart;\n  };\n\n  chart.scaleToFit = function (_) {\n    if (!arguments.length) return scaleToFit;\n    scaleToFit = _;\n    return chart;\n  };\n\n  chart.styled = function (_) {\n    if (!arguments.length) return styled;\n    styled = _;\n    return chart;\n  };\n\n  chart.orientation = function (_) {\n    if (!arguments.length) return orientation;\n    orientation = _;\n    return chart;\n  };\n\n  chart.orientationOrder = function (_) {\n    if (!arguments.length) return orientationOrder;\n    orientationOrder = _;\n    return chart;\n  };\n\n  chart.lossFunction = function (_) {\n    if (!arguments.length) return loss;\n    loss = _ === 'default' ? lossFunction : _ === 'logRatio' ? logRatioLossFunction : _;\n    return chart;\n  };\n\n  return chart;\n}\n\n// sometimes text doesn't fit inside the circle, if thats the case lets wrap\n// the text here such that it fits\n// todo: looks like this might be merged into d3 (\n// https://github.com/mbostock/d3/issues/1642),\n// also worth checking out is\n// http://engineering.findthebest.com/wrapping-axis-labels-in-d3-js/\n// this seems to be one of those things that should be easy but isn't\nfunction wrapText(circles, labeller) {\n  return function (data) {\n    const text = this;\n    const width = circles[data.sets[0]].radius || 50;\n    const label = labeller(data) || '';\n\n    const words = label.split(/\\s+/).reverse();\n    const maxLines = 3;\n    const minChars = (label.length + words.length) / maxLines;\n\n    let word = words.pop();\n    let line = [word];\n    let lineNumber = 0;\n    const lineHeight = 1.1; // ems\n    text.textContent = null; // clear\n    const tspans = [];\n\n    function append(word) {\n      const tspan = text.ownerDocument.createElementNS(text.namespaceURI, 'tspan');\n      tspan.textContent = word;\n      tspans.push(tspan);\n      text.append(tspan);\n      return tspan;\n    }\n    let tspan = append(word);\n\n    while (true) {\n      word = words.pop();\n      if (!word) {\n        break;\n      }\n      line.push(word);\n      const joined = line.join(' ');\n      tspan.textContent = joined;\n      if (joined.length > minChars && tspan.getComputedTextLength() > width) {\n        line.pop();\n        tspan.textContent = line.join(' ');\n        line = [word];\n        tspan = append(word);\n        lineNumber++;\n      }\n    }\n\n    const initial = 0.35 - (lineNumber * lineHeight) / 2;\n    const x = text.getAttribute('x');\n    const y = text.getAttribute('y');\n    tspans.forEach((t, i) => {\n      t.setAttribute('x', x);\n      t.setAttribute('y', y);\n      t.setAttribute('dy', `${initial + i * lineHeight}em`);\n    });\n  };\n}\n\n/**\n *\n * @param {{x: number, y: number}} current\n * @param {ReadonlyArray<{x: number, y: number}>} interior\n * @param {ReadonlyArray<{x: number, y: number}>} exterior\n * @returns {number}\n */\nfunction circleMargin(current, interior, exterior) {\n  let margin = interior[0].radius - distance(interior[0], current);\n\n  for (let i = 1; i < interior.length; ++i) {\n    const m = interior[i].radius - distance(interior[i], current);\n    if (m <= margin) {\n      margin = m;\n    }\n  }\n\n  for (let i = 0; i < exterior.length; ++i) {\n    const m = distance(exterior[i], current) - exterior[i].radius;\n    if (m <= margin) {\n      margin = m;\n    }\n  }\n  return margin;\n}\n\n/**\n * compute the center of some circles by maximizing the margin of\n * the center point relative to the circles (interior) after subtracting\n * nearby circles (exterior)\n * @param {readonly {x: number, y: number, radius: number}[]} interior\n * @param {readonly {x: number, y: number, radius: number}[]} exterior\n * @param {boolean} symmetricalTextCentre\n * @returns {{x:number, y: number}}\n */\nfunction computeTextCentre(interior, exterior, symmetricalTextCentre) {\n  // get an initial estimate by sampling around the interior circles\n  // and taking the point with the biggest margin\n  /** @type {{x: number, y: number}[]} */\n  const points = [];\n  for (const c of interior) {\n    points.push({ x: c.x, y: c.y });\n    points.push({ x: c.x + c.radius / 2, y: c.y });\n    points.push({ x: c.x - c.radius / 2, y: c.y });\n    points.push({ x: c.x, y: c.y + c.radius / 2 });\n    points.push({ x: c.x, y: c.y - c.radius / 2 });\n  }\n\n  let initial = points[0];\n  let margin = circleMargin(points[0], interior, exterior);\n\n  for (let i = 1; i < points.length; ++i) {\n    const m = circleMargin(points[i], interior, exterior);\n    if (m >= margin) {\n      initial = points[i];\n      margin = m;\n    }\n  }\n\n  // maximize the margin numerically\n  const solution = nelderMead(\n    (p) => -1 * circleMargin({ x: p[0], y: p[1] }, interior, exterior),\n    [initial.x, initial.y],\n    { maxIterations: 500, minErrorDelta: 1e-10 }\n  ).x;\n\n  const ret = { x: symmetricalTextCentre ? 0 : solution[0], y: solution[1] };\n\n  // check solution, fallback as needed (happens if fully overlapped\n  // etc)\n  let valid = true;\n  for (const i of interior) {\n    if (distance(ret, i) > i.radius) {\n      valid = false;\n      break;\n    }\n  }\n\n  for (const e of exterior) {\n    if (distance(ret, e) < e.radius) {\n      valid = false;\n      break;\n    }\n  }\n  if (valid) {\n    return ret;\n  }\n\n  if (interior.length == 1) {\n    return { x: interior[0].x, y: interior[0].y };\n  }\n  const areaStats = {};\n  intersectionArea(interior, areaStats);\n\n  if (areaStats.arcs.length === 0) {\n    return { x: 0, y: -1000, disjoint: true };\n  }\n  if (areaStats.arcs.length == 1) {\n    return { x: areaStats.arcs[0].circle.x, y: areaStats.arcs[0].circle.y };\n  }\n  if (exterior.length) {\n    // try again without other circles\n    return computeTextCentre(interior, []);\n  }\n  // take average of all the points in the intersection\n  // polygon. this should basically never happen\n  // and has some issues:\n  // https://github.com/benfred/venn.js/issues/48#issuecomment-146069777\n  return getCenter(areaStats.arcs.map((a) => a.p1));\n}\n\n// given a dictionary of {setid : circle}, returns\n// a dictionary of setid to list of circles that completely overlap it\nfunction getOverlappingCircles(circles) {\n  const ret = {};\n  const circleids = Object.keys(circles);\n  for (const circleid of circleids) {\n    ret[circleid] = [];\n  }\n  for (let i = 0; i < circleids.length; i++) {\n    const ci = circleids[i];\n    const a = circles[ci];\n    for (let j = i + 1; j < circleids.length; ++j) {\n      const cj = circleids[j];\n      const b = circles[cj];\n      const d = distance(a, b);\n\n      if (d + b.radius <= a.radius + 1e-10) {\n        ret[cj].push(ci);\n      } else if (d + a.radius <= b.radius + 1e-10) {\n        ret[ci].push(cj);\n      }\n    }\n  }\n  return ret;\n}\n\nfunction computeTextCentres(circles, areas, symmetricalTextCentre) {\n  const ret = {};\n  const overlapped = getOverlappingCircles(circles);\n  for (let i = 0; i < areas.length; ++i) {\n    const area = areas[i].sets;\n    const areaids = {};\n    const exclude = {};\n\n    for (let j = 0; j < area.length; ++j) {\n      areaids[area[j]] = true;\n      const overlaps = overlapped[area[j]];\n      // keep track of any circles that overlap this area,\n      // and don't consider for purposes of computing the text\n      // centre\n      for (let k = 0; k < overlaps.length; ++k) {\n        exclude[overlaps[k]] = true;\n      }\n    }\n\n    const interior = [];\n    const exterior = [];\n    for (let setid in circles) {\n      if (setid in areaids) {\n        interior.push(circles[setid]);\n      } else if (!(setid in exclude)) {\n        exterior.push(circles[setid]);\n      }\n    }\n    const centre = computeTextCentre(interior, exterior, symmetricalTextCentre);\n    ret[area] = centre;\n    if (centre.disjoint && areas[i].size > 0) {\n      console.log('WARNING: area ' + area + ' not represented on screen');\n    }\n  }\n  return ret;\n}\n\n// sorts all areas in the venn diagram, so that\n// a particular area is on top (relativeTo) - and\n// all other areas are so that the smallest areas are on top\nfunction sortAreas(div, relativeTo) {\n  // figure out sets that are completely overlapped by relativeTo\n  const overlaps = getOverlappingCircles(div.selectAll('svg').datum());\n  const exclude = new Set();\n  for (const check of relativeTo.sets) {\n    for (let setid in overlaps) {\n      const overlap = overlaps[setid];\n      for (let j = 0; j < overlap.length; ++j) {\n        if (overlap[j] == check) {\n          exclude.add(setid);\n          break;\n        }\n      }\n    }\n  }\n\n  // checks that all sets are in exclude;\n  function shouldExclude(sets) {\n    return sets.every((set) => !exclude.has(set));\n  }\n\n  // need to sort div's so that Z order is correct\n  div.selectAll('g').sort((a, b) => {\n    // highest order set intersections first\n    if (a.sets.length != b.sets.length) {\n      return a.sets.length - b.sets.length;\n    }\n\n    if (a == relativeTo) {\n      return shouldExclude(b.sets) ? -1 : 1;\n    }\n    if (b == relativeTo) {\n      return shouldExclude(a.sets) ? 1 : -1;\n    }\n\n    // finally by size\n    return b.size - a.size;\n  });\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @param {number} r\n * @returns {string}\n */\nfunction circlePath(x, y, r) {\n  const ret = [];\n  ret.push('\\nM', x, y);\n  ret.push('\\nm', -r, 0);\n  ret.push('\\na', r, r, 0, 1, 0, r * 2, 0);\n  ret.push('\\na', r, r, 0, 1, 0, -r * 2, 0);\n  return ret.join(' ');\n}\n\n/**\n * inverse of the circlePath function, returns a circle object from an svg path\n * @param {string} path\n * @returns {{x: number, y: number, radius: number}}\n */\nfunction circleFromPath(path) {\n  const tokens = path.split(' ');\n  return { x: Number.parseFloat(tokens[1]), y: Number.parseFloat(tokens[2]), radius: -Number.parseFloat(tokens[4]) };\n}\n\nfunction intersectionAreaArcs(circles) {\n  if (circles.length === 0) {\n    return [];\n  }\n  const stats = {};\n  intersectionArea(circles, stats);\n  return stats.arcs;\n}\n\nfunction arcsToPath(arcs, round) {\n  if (arcs.length === 0) {\n    return 'M 0 0';\n  }\n  const rFactor = Math.pow(10, round || 0);\n  const r = round != null ? (v) => Math.round(v * rFactor) / rFactor : (v) => v;\n  if (arcs.length == 1) {\n    const circle = arcs[0].circle;\n    return circlePath(r(circle.x), r(circle.y), r(circle.radius));\n  }\n  // draw path around arcs\n  const ret = ['\\nM', r(arcs[0].p2.x), r(arcs[0].p2.y)];\n  for (const arc of arcs) {\n    const radius = r(arc.circle.radius);\n    ret.push('\\nA', radius, radius, 0, arc.large ? 1 : 0, arc.sweep ? 1 : 0, r(arc.p1.x), r(arc.p1.y));\n  }\n  return ret.join(' ');\n}\n\n/**\n * returns a svg path of the intersection area of a bunch of circles\n * @param {ReadonlyArray<{x: number, y: number, radius: number}>} circles\n * @returns {string}\n */\nfunction intersectionAreaPath(circles, round) {\n  return arcsToPath(intersectionAreaArcs(circles), round);\n}\n\nfunction layout(data, options = {}) {\n  const {\n    lossFunction: loss,\n    layoutFunction: layout = venn,\n    normalize = true,\n    orientation = Math.PI / 2,\n    orientationOrder,\n    width = 600,\n    height = 350,\n    padding = 15,\n    scaleToFit = false,\n    symmetricalTextCentre = false,\n    distinct,\n    round = 2,\n  } = options;\n\n  let solution = layout(data, {\n    lossFunction: loss === 'default' || !loss ? lossFunction : loss === 'logRatio' ? logRatioLossFunction : loss,\n    distinct,\n  });\n\n  if (normalize) {\n    solution = normalizeSolution(solution, orientation, orientationOrder);\n  }\n\n  const circles = scaleSolution(solution, width, height, padding, scaleToFit);\n  const textCentres = computeTextCentres(circles, data, symmetricalTextCentre);\n\n  const circleLookup = new Map(\n    Object.keys(circles).map((set) => [\n      set,\n      {\n        set,\n        x: circles[set].x,\n        y: circles[set].y,\n        radius: circles[set].radius,\n      },\n    ])\n  );\n  const helpers = data.map((area) => {\n    const circles = area.sets.map((s) => circleLookup.get(s));\n    const arcs = intersectionAreaArcs(circles);\n    const path = arcsToPath(arcs, round);\n    return { circles, arcs, path, area, has: new Set(area.sets) };\n  });\n\n  function genDistinctPath(sets) {\n    let r = '';\n    for (const e of helpers) {\n      if (e.has.size > sets.length && sets.every((s) => e.has.has(s))) {\n        r += ' ' + e.path;\n      }\n    }\n    return r;\n  }\n\n  return helpers.map(({ circles, arcs, path, area }) => {\n    return {\n      data: area,\n      text: textCentres[area.sets],\n      circles,\n      arcs,\n      path,\n      distinctPath: path + genDistinctPath(area.sets),\n    };\n  });\n}\n\nexport { VennDiagram, bestInitialLayout, circleArea, circleCircleIntersection, circleFromPath, circleOverlap, circlePath, computeTextCentre, computeTextCentres, disjointCluster, distance, distanceFromIntersectArea, greedyLayout, intersectionArea, intersectionAreaPath, layout, logRatioLossFunction, lossFunction, normalizeSolution, scaleSolution, sortAreas, venn, wrapText };\n", null, null, null, null, null, null, null, null, null, null],
  "mappings": "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AG,MAAM,GAEtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GAEtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,IAAI,KAAK,EAAE,GAAG,MAAM,GAEtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,MAAM,GACtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,MAAM,GAEtE,eAAe,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,EAAE,GAAG,CAAA,GAAI,MAAM,CAAC;AAE3E;EACH;AACD,SAAO;IACL,QAAQA,MAAK,IAAI,CAAC,MAAM,EAAE,KAAK;IAC/B,UAAU;MACR;QACE,OAAO,QAAQ,SAAS;QACxB,MAAMA;MACP;IACF;;AAEL;",
  "names": ["i", "iteration", "center", "sets", "distance", "dist", "layout", "circles", "sets", "layout", "sets", "bb"]
}
