'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutPropertiesLoose = _interopDefault(require('@babel/runtime/helpers/objectWithoutPropertiesLoose'));
var Zdog = _interopDefault(require('zdog'));
var React = require('react');
var React__default = _interopDefault(React);
var ResizeObserver = _interopDefault(require('resize-observer-polyfill'));

var stateContext = React__default.createContext();
var parentContext = React__default.createContext();
var globalEffects = [];
function addEffect(callback) {
  globalEffects.push(callback);
}
function invalidate() {// TODO: render loop has to be able to render frames on demand
}
function applyProps(instance, newProps) {
  Zdog.extend(instance, newProps);
}

function useMeasure() {
  var ref = React.useRef();

  var _useState = React.useState({
    left: 0,
    top: 0,
    width: 0,
    height: 0
  }),
      bounds = _useState[0],
      set = _useState[1];

  var _useState2 = React.useState(function () {
    return new ResizeObserver(function (_ref) {
      var entry = _ref[0];
      return set(entry.contentRect);
    });
  }),
      ro = _useState2[0];

  React.useEffect(function () {
    if (ref.current) ro.observe(ref.current);
    return function () {
      return ro.disconnect();
    };
  }, [ref.current]);
  return [{
    ref: ref
  }, bounds];
}

function useRender(fn, deps) {
  if (deps === void 0) {
    deps = [];
  }

  var state = React.useContext(stateContext);
  React.useEffect(function () {
    // Subscribe to the render-loop
    var unsubscribe = state.current.subscribe(fn); // Call subscription off on unmount

    return function () {
      return unsubscribe();
    };
  }, deps);
}

function useZdog() {
  var state = React.useContext(stateContext);
  return state.current;
}

function useZdogPrimitive(primitive, children, props, ref) {
  var state = React.useContext(stateContext);
  var parent = React.useContext(parentContext);

  var _useState3 = React.useState(function () {
    return new primitive(props);
  }),
      node = _useState3[0];

  React.useImperativeHandle(ref, function () {
    return node;
  });
  React.useLayoutEffect(function () {
    return void applyProps(node, props);
  }, [props]);
  React.useLayoutEffect(function () {
    if (parent) {
      parent.addChild(node);
      state.current.illu.updateGraph();
      return function () {
        parent.removeChild(node);
        parent.updateFlatGraph();
        state.current.illu.updateGraph();
      };
    }
  }, [parent]);
  return [React__default.createElement(parentContext.Provider, {
    value: node,
    children: children
  }), node];
}

var Illustration = React__default.memo(function (_ref2) {
  var children = _ref2.children,
      style = _ref2.style,
      resize = _ref2.resize,
      _ref2$element = _ref2.element,
      Element = _ref2$element === void 0 ? 'svg' : _ref2$element,
      dragRotate = _ref2.dragRotate,
      rest = _objectWithoutPropertiesLoose(_ref2, ["children", "style", "resize", "element", "dragRotate"]);

  var canvas = React.useRef();

  var _useMeasure = useMeasure(),
      bind = _useMeasure[0],
      size = _useMeasure[1];

  var _useZdogPrimitive = useZdogPrimitive(Zdog.Anchor, children),
      result = _useZdogPrimitive[0],
      scene = _useZdogPrimitive[1];

  var state = React.useRef({
    scene: scene,
    illu: undefined,
    size: {},
    subscribers: [],
    subscribe: function subscribe(fn) {
      state.current.subscribers.push(fn);
      return function () {
        return state.current.subscribers = state.current.subscribers.filter(function (s) {
          return s !== fn;
        });
      };
    }
  });
  React.useEffect(function () {
    state.current.size = size;
    if (state.current.illu) state.current.illu.setSize(size.width, size.height);
  }, [size]);
  React.useEffect(function () {
    state.current.illu = new Zdog.Illustration(_extends({
      element: canvas.current,
      dragRotate: dragRotate
    }, rest));
    state.current.illu.addChild(scene);
    state.current.illu.updateGraph();
    var frame;
    var active = true;

    function render(t) {
      var _state$current = state.current,
          size = _state$current.size,
          subscribers = _state$current.subscribers;

      if (size.width && size.height) {
        // Run global effects
        globalEffects.forEach(function (fn) {
          return fn(t);
        }); // Run local effects

        subscribers.forEach(function (fn) {
          return fn(t);
        }); // Render scene

        state.current.illu.updateRenderGraph();
      }

      if (active) frame = requestAnimationFrame(render);
    } // Start render loop


    render();
    return function () {
      // Take no chances, the loop has got to stop if the component unmounts
      active = false;
      cancelAnimationFrame(frame);
    };
  }, []); // Takes care of updating the main illustration

  React.useLayoutEffect(function () {
    return void (state.current.illu && applyProps(state.current.illu, rest));
  }, [rest]);
  return React__default.createElement("div", _extends({
    ref: bind.ref
  }, rest, {
    style: _extends({
      position: 'relative',
      width: '100%',
      height: '100%',
      overflow: 'hidden'
    }, style)
  }), React__default.createElement(Element, {
    ref: canvas,
    style: {
      display: 'block'
    },
    width: size.width,
    height: size.height
  }), state.current.illu && React__default.createElement(stateContext.Provider, {
    value: state,
    children: result
  }));
});

var createZdog = function createZdog(primitive) {
  return React__default.forwardRef(function (_ref3, ref) {
    var children = _ref3.children,
        rest = _objectWithoutPropertiesLoose(_ref3, ["children"]);

    return useZdogPrimitive(primitive, children, rest, ref)[0];
  });
};

var Anchor = createZdog(Zdog.Anchor);
var Shape = createZdog(Zdog.Shape);
var Group = createZdog(Zdog.Group);
var Rect = createZdog(Zdog.Rect);
var RoundedRect = createZdog(Zdog.RoundedRect);
var Ellipse = createZdog(Zdog.Ellipse);
var Polygon = createZdog(Zdog.Polygon);
var Hemisphere = createZdog(Zdog.Hemisphere);
var Cylinder = createZdog(Zdog.Cylinder);
var Cone = createZdog(Zdog.Cone);
var Box = createZdog(Zdog.Box);

exports.Anchor = Anchor;
exports.Box = Box;
exports.Cone = Cone;
exports.Cylinder = Cylinder;
exports.Ellipse = Ellipse;
exports.Group = Group;
exports.Hemisphere = Hemisphere;
exports.Illustration = Illustration;
exports.Polygon = Polygon;
exports.Rect = Rect;
exports.RoundedRect = RoundedRect;
exports.Shape = Shape;
exports.addEffect = addEffect;
exports.applyProps = applyProps;
exports.invalidate = invalidate;
exports.useRender = useRender;
exports.useZdog = useZdog;
