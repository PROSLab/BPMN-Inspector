ActivityDescription.Description=The designer should provide a brief description for each activity in the model.
ActivityDescription.Name=Provide activity descriptions
ActivityDescription.SuggestionKO=\nPlease add Activity Description in element:
ActivityDescription.SuggestionOK=Well done\!
ActivityDescription.SuggestionSubprocessKO=\nPlease add Activity Description in SubProcess 
ApplyHierarchicalStructure.Description=The designer should create a hierarchical model structure. BPMN sub-processes are used to split the process into layers. The designer can expand the sub-processes later to expose details of lower levels of hierarchy. A process model will contain multiple layers, but internally the integrity of a single model has to be maintained.
ApplyHierarchicalStructure.Name=Apply hierarchical structure with sub-processes
ApplyHierarchicalStructure.SuggestionKO=Apply hierarchical structure with SubProcesses: 
ApplyHierarchicalStructure.SuggestionOK=Well done\!
AssociateDataObject.Description=The designer should associate data objects only to activities. In particular the modeler should not associate a data object with a sequence flow if the sequence flow is connected to a gateway. The associations should always be modeled with a direction.
AssociateDataObject.Name=Associate data object consistently
AssociateDataObject.SuggestionKO=Associate data objects only to activities
AssociateDataObject.SuggestionOK=Well done\!
AvoidOverlapping.Description=The designer should avoid overlapping, or crossing, BPMN elements.
AvoidOverlapping.Name=Avoid Overlapping
AvoidOverlapping.SuggestionKO=Do not overlap or cross BPMN elements 
AvoidOverlapping.SuggestionOK=Well done\!
BalanceGateways.Description=The designer should always use the same type of gateway used both for splitting and joining the flow. For example, when a flow is divided with a parallel gateway, the resulting parallel flows should be consolidated via another parallel gateway. In particular, the designer should ensure that join parallel gateways have the correct number of incoming sequence flow especially when used in conjunction with other gateways; this is related to ensuring the soundness property. Do not apply this guidelines on Event-based or Complex Gateways.
BalanceGateways.Name=Balance gateways
BalanceGateways.SuggestionKO=Balance gateways 
BalanceGateways.SuggestionOK=Well done\!
BalanceGateways.SuggestionSubprocessKO=\nBalance gateways in SubProcess 
ConsistentUsageEndEvents.Description=The designer should distinguish success and failure end states in a process or a sub-process with separate end events. Flows that end in the same end state should be merged to the same end event. Therefore, separate end events that do not represent distinct end states must be merged in a single end event.
ConsistentUsageEndEvents.Name=Use end events consistently
ConsistentUsageEndEvents.SuggestionKO=\nUse only one End Event:
ConsistentUsageEndEvents.SuggestionOK=Well done\!
ConsistentUsageEndEvents.SuggestionSubprocessKO=\nUse only one End Event in SubProcess 
ConsistentUsageLanes.Description=The designer should model internal organizational units as lanes within a single pool, not as separate pools; separate pools imply independent processes. Create a lane, in a pool, only if at least one activity or intermediate event is performed in it.
ConsistentUsageLanes.Name=Use lanes consistently
ConsistentUsageLanes.SuggestionKO=\nInsert Activities in Lanes:
ConsistentUsageLanes.SuggestionOK=Well done\!
ConsistentUsagePools.Description=The designer should define as many pools as processes and/or participants. Use a black-box pool to represent external participant/processes. The modeled pools need to be in relation with each other and have to be linked to the main process through message exchange.
ConsistentUsagePools.Name=Use pools consistently
ConsistentUsagePools.SuggestionKO=\nOpen only one pools and connect all the pool together: 
ConsistentUsagePools.SuggestionOK=Well done\!
ConsistentUsageStartEvents.Description=The designer should include, in the model, only one start event. Where necessary, alternative instantiations of the process should be depicted with separate start events and using a event-based start gateway.
ConsistentUsageStartEvents.Name=Use start events consistently
ConsistentUsageStartEvents.SuggestionKO=\nUse only one Start End Event:
ConsistentUsageStartEvents.SuggestionOK=Well done\!
ConsistentUsageStartEvents.SuggestionSubProcessKO=\nUse only one Start Event in SubProcess 
DocumentMinorDetails.Description=The designer should leave details to documentation keeping labels simple and limiting the use of text annotations.
DocumentMinorDetails.Name=Document minor details
DocumentMinorDetails.SuggestionKO=\nUse only one text annotations for each element:
DocumentMinorDetails.SuggestionOK=Well done\!
explicitGateways.Description=The designer should split or join sequence flows always using gateways. The modeler should not split or join flows using activities or events. This includes that an activity can have only one incoming sequence flow and only one outgoing sequence flow.
explicitGateways.Name=Use explicit gateways
explicitGateways.SuggestionKO=Add Gateway before or/and after of the elements: 
explicitGateways.SuggestionOK=Well done\!
ExclusiveGatewayMarking.Description=The designer should use the Exclusive Gateway with the marker \u201CX\u201D instead of using it without marker.
ExclusiveGatewayMarking.Name=Mark exclusive gateways
ExclusiveGatewayMarking.SuggestionKO=Add the marker in Exclusive Gateway:
ExclusiveGatewayMarking.SuggestionOK=Well done\!
ExplicitStartEndEvents.Description=The designer should explicitly make use of start and end events. The use of start and end events is necessary to represent the different states that begin and complete the modeled process. Processes with implicit start and end events are undesirable and could lead to misinterpretations.
ExplicitStartEndEvents.Name=Use start and end events explicitly
ExplicitStartEndEvents.SuggestionKO=Add Start or/and End Event 
ExplicitStartEndEvents.SuggestionOK=Well done\!
ExplicitStartEndEvents.SuggestionSubprocessKO=\nAdd Start or/and End Event in SubProcess 
GuidelinesFactory.KO=KO
GuidelinesFactory.KODescription=Please follow these guidelines:
GuidelinesFactory.OK=OK
GuidelinesFactory.OKDescription=Well done, no errors found\!
Generic.LabelEmpty=Unlabeled
LabelingActivities.Description=The designer should label activities with one verb, and one object. The verb used should use the present tense and be familiar to the organization. The object has to be qualified and also of meaning to the business. The designer should not label multiple activities with the same name, except for same Call Activities used many time in the process. Send and receive verbs should be present only for sending and receiving activities.
LabelingActivities.Name=Labeling activities
LabelingActivities.SuggestionKO=\nLabeling Activities:
LabelingActivities.SuggestionOK=Well done\!
LabelingActivities.SuggestionSubprocessKO=\nLabeling Activities in SubProcess 
LabelingANDGateways.Description=The designer should omit labels on AND splits and joins (and sequence flows connecting them); they add no new information, so it is best to omit them.
LabelingANDGateways.Name=Labeling AND gateways
LabelingANDGateways.SuggestionKO=\nNot Labeling AND Gateways: 
LabelingANDGateways.SuggestionOK=Well done\!
LabelingANDGateways.SuggestionSubprocessKO=\nNot Labeling AND Gateways in SubProcess: 
LabelingConvergingGateways.Description=The designer should not label converging gateways. When the convergence logic is not obvious, the designer should associate a text annotation to the gateway.
LabelingConvergingGateways.Name=Labeling converging gateways
LabelingConvergingGateways.SuggestionKO=\nNot Labeling Converging Gateways: 
LabelingConvergingGateways.SuggestionOK=Well done\!
LabelingConvergingGateways.SuggestionSubprocessKO=\nNot Labeling Converging Gateways in SubProcess: 
LabelingDataObject.Description=All data objects should be labeled using a qualified noun that is the name of a business object. Multiple instances of the same data object are labeled (which are really data object references) using a matching label followed by the applicable state in square brackets.
LabelingDataObject.Name=Labeling data objects
LabelingDataObject.SuggestionKO=\nLabeling Data Objects: 
LabelingDataObject.SuggestionOK=Well done\!
LabelingDataObject.SuggestionSubprocessKO=\nLabeling Data Objects in SubProcess: 
LabelingEvents.Description=The designer should model all events with a label representing the state of the process: (i) Events of type message, signal, escalation, and error events should be labeled with a past participle using an active verb; (ii) Link events should be labeled with a noun; (iii) Timer events should be labeled with time-date or schedule; (iv) Conditional events should be labeled with the condition that triggers them.
LabelingEvents.Name=Labeling events
LabelingEvents.SuggestionKO=\nUse Labeling in Events:
LabelingEvents.SuggestionOK=Well done\!
LabelingEvents.SuggestionSubProcessKO=\nUse Labeling in Events of the SubProcess 
LabelingLanes.Description=The designer should always assign a label to lanes. The label should identify the responsible entity for the process. Lanes are often used for representing things as internal roles (e.g., manager, associate), systems (e.g., an enterprise application), or internal departments (e.g., shipping, finance).
LabelingLanes.Name=Labeling lanes
LabelingLanes.SuggestionKO=\nLabeling Lanes:
LabelingLanes.SuggestionOK=Well done\!
LabelingMessageEvent.Decription=The designer should draw a message flow whenever he uses a message event, and he should label the event. When a focus on the message itself is required, the designer can represent a message icon and label it with the name of the message.
LabelingMessageEvent.Name=Labeling message event
LabelingMessageEvent.SuggestionKO=\nLabeling Message Events:
LabelingMessageEvent.SuggestionOK=Well done\!
LabelingMessageEvent.SuggestionSubprocessKO=\nLabeling Message Events in SubProcess: 
LabelingPools.Description=The designer should label pools using the participant's name. The main pool can be labeled using the process name. If a pool is present in a subprocess, the name of the pool must be the same of the upper-level process pool which includes the subprocess activity. This means that the pool of the upper-level process and the pool of the subprocess needs to be the same.
LabelingPools.Name=Labeling pools
LabelingPools.SuggestionKO=\nLabeling Pools:
LabelingPools.SuggestionOK=Well done\!
LabelingStartandEndEvents.Description=The designer should not label start none and end none event if there is only one instance of them. The modeler should use labeling when multiple start and end events are used. Label them according to what they represent using a noun. Do not repeat names.
LabelingStartandEndEvents.Name=Labeling start and end events
LabelingStartandEndEvents.SuggestionKO=\nLabeling Start/End Events: 
LabelingStartandEndEvents.SuggestionOK=Well done\!
LabelingStartandEndEvents.SuggestionSubprocessKO=\nLabeling Start/End Events in SubProcess: 
LabelingSynchronisedEndSplit.Description=The designer should use gateways and sub-processes consistently. The designer should match the labels of sub-process end states with the labels of a gateway immediately following the sub-process; this allows to have a clear vision on how sub-process and process are linked together.
LabelingSynchronisedEndSplit.Name=Labeling Synchronised End/Split
LabelingSynchronisedEndSplit.SuggestionKO=Match the labels of sub-process end states with the labels of the gateway's sequence flows:
LabelingSynchronisedEndSplit.SuggestionOK=Well done\!
LabelingXORGateway.Description=The designer should label XOR split gateways with an interrogative phrase (do not label XOR join-gateways). Sequence flows coming out of diverging gateways should be labeled using their associated conditions stated as outcomes.
LabelingXORGateway.Name=Labeling XOR gateways
LabelingXORGateway.SuggestionKO=\nLabeling XOR Gateways: 
LabelingXORGateway.SuggestionOK=Well done\!
LabelingXORGateway.SuggestionSubprocessKO=\nLabeling XOR Gateways in SubProcess: 
LinearMessageFlows.Description=The designer should use linear message flows without useless foldings; it helps to maintain the model clear.
LinearMessageFlows.Name=Use linear message flows
LinearMessageFlows.SuggestionKO=Use Linear Message Flows: 
LinearMessageFlows.SuggestionOK=Well done\!
LinearSequenceFlows.Description=The designer should use linear sequence flows without useless foldings; it helps to maintain the model clean.
LinearSequenceFlows.Name=Use linear sequence flows
LinearSequenceFlows.SeggestionOK=Well done\!
LinearSequenceFlows.SuggestionKO=Use Linear sequence flows: 
LoopMarkerAnnotation.Description=The designer should associate a text annotation to a loop represented with a loop marker so to express the condition (which alternatively is hidden).
LoopMarkerAnnotation.Name=Include loop marker annotations
LoopMarkerAnnotation.SuggestionKO=\nLabeling Marker Annotations:
LoopMarkerAnnotation.SuggestionOK=Well done\!
LoopMarkerAnnotation.SuggestionSubprocessKO=\nInclude loop marker annotations in sub-process 
MinimizeConcurrency.Description=The designer should minimize the level of concurrency which means to reduce the use of parallel gateways and ad-hoc sub-processes. Concurrency, which is represented by parallel gateways, may generate ambiguity, especially if the activities in parallel are \u201Cmanual tasks\u201D and only one person is responsible for those. In this case there will be no parallelization but it is up to the person to decide the tasks execution order.
MinimizeConcurrency.Name=Minimize concurrency
MinimizeConcurrency.SuggestionKO=Minimize Concurrency 
MinimizeConcurrency.SuggestionOK=Well done\! 
MinimizeGatewayHeterogeneity.Description=The designer should minimize the heterogeneity of gateway types. The use of several type of gateway may cause confusion.
MinimizeGatewayHeterogeneity.Name=Minimize gateway heterogeneity
MinimizeGatewayHeterogeneity.SuggestionKO=Minimize Gateway Heterogeneity 
MinimizeGatewayHeterogeneity.SuggestionOK=Well done\!
MinimizeGatewayHeterogeneity.SuggestionSubprocessKO=\nMinimize Gateway Heterogeneity in SubProcess 
MinimizeModelSize.Description=The designer should try to keep models as small as possible. Large models tend to contain more errors. Additionally they are difficult to read and comprehend. Defining the correct scope of tasks and level of detail of models is the key to reduce the overage of information.
MinimizeModelSize.Name=Minimize model size
MinimizeModelSize.SuggestionKO=Too much elements %s. Please use max 31  the number of nodes: number of activities and routing elements in a process model
MinimizeModelSize.SuggestionOK=Well done\!
ModelLoops.Description=The designer should model a loop via activity looping (with the loop marker) instead of using a sequence flow looping; this, where possible, and if this practice actually contributes to simplify the model.
ModelLoops.Name=Model loops via loop activities
ModelLoops.SuggestionKO=Model loops via activity looping: 
ModelLoops.SuggestionOK=Well done\!
OrganizeArtifact.Description=The designer should group artifacts flows, if there are several artifacts. The designer should pick a point on the boundary of an activity and have all the flows connected to that point. If there are multiple flows for the same artifact, the designer should group the flows.
OrganizeArtifact.Name= Organize artifacts flows
OrganizeArtifact.SuggestionKO= Group the flows on a same point
OrganizeArtifact.SuggestionOK=Well done\!
ProcessOrientation.Description=The designer should draw pools horizontally and use consistent layout with horizontal sequence flows, and vertical message flows and associations.
ProcessOrientation.Name=Use a consistent process orientation
ProcessOrientation.SuggestionKO=Change Process Orientation: 
ProcessOrientation.SuggestionOK=Well done\!
RestrictUsageTerminateEndEvent.Description=The designer should use terminate events only when strictly necessary; they are used to model situations where several alternative paths are enabled and the entire process have to be finished when one of them is completed. The designer should use other end events rather than the terminate end event (e.g. a generic end event), to guarantee that the executions of the reaming process paths or activities will not be stopped.
RestrictUsageTerminateEndEvent.Name=Restrict usage of terminate end events
RestrictUsageTerminateEndEvent.SuggestionKO=\nDo not use Terminate End Event:
RestrictUsageTerminateEndEvent.SuggestionOK=Well done\!
RestrictUsageTerminateEndEvent.SuggestionSubprocessKO=\nDon't use Terminate Event in SubProcess 
ScopeAttachedEvents.Description=The designer should use a sub-process with attached event to clearly define the scope of an event. If the response to the handling of an exception (in the use of boundary events) is the same for every activity within a contiguous segment of the process, the designer should not attach the same boundary event to all the activities and he should not represent the same exception flows multiple times. 
ScopeAttachedEvents.Name=Use sub-processes to scope attached events
ScopeAttachedEvents.SuggestionKO= The correct way, the designer should model it, is to enclose that segment in a subprocess and attach a single boundary event to the sub-process boundary.
ScopeAttachedEvents.SuggestionOK=Well done\!
SplitAndJoinFlows.Description=The designer should not use gateways to join and split at the same time.
SplitAndJoinFlows.Name=Split and join flows consistently
SplitAndJoinFlows.SuggestionKO=Split following Gateway:
SplitAndJoinFlows.SuggestionOK=Well done\!
StandardFormat.Description=The designer should keep a unique format along diagrams and focus on a clean and friendly look and feel. Using different font sizes, colors, boxes sizes or overlapping labels might make the diagrams reading a challenge. The designer should not model further properties with different colours, in order to make diagrams recognizable. NOTE: The representation of the model analyzed does not show the style used.
StandardFormat.Name=Keep a standard format:
StandardFormat.SuggestionKO=Keep a unique format along the diagram:
StandardFormat.SuggestionOK=Well done\!
UsageDefaultFlows.Description=Where possible, after an exclusive and an inclusive gateway, the designer should express the default flow. One way for the modeler to ensure that the process does not get stuck at a gateway is to use a default condition for one of the outgoing sequence flow. This default sequence flow will always evaluate to true if all the other sequence flow conditions turn out to be false.
UsageDefaultFlows.Name=Use default flows
UsageDefaultFlows.SuggestionKO=Usage of default flows in Exclusive Gateways
UsageDefaultFlows.SuggestionOK=Well done\!
UsageDefaultFlows.SuggestionSubprocessKO=\nUsage of default flows in SubProcess 
UsageMessageFlows.Description=The designer should represent message flows with all message events and send/receive tasks. If in a subprocess are present more message flows to the same pool, the designer should show in the top-level process maximum two message flows: one for all outgoing message flow and one for all incoming message flow with that pool.
UsageMessageFlows.Name=Use message flows
UsageMessageFlows.SuggestionKO=Usage of message flows with send/receive Task
UsageMessageFlows.SuggestionOK=Well done\!
UsageInclusiveORGateways.Description=The designer should minimize the use of inclusive gateways (OR-joins and OR-splits). Inclusive OR-splits activate one, several, or all subsequent branches based on conditions. They need to be synchronized with inclusive OR-join elements, which are difficult to understand in the general case.
UsageInclusiveORGateways.Name= Minimize inclusive OR gateways
UsageInclusiveORGateways.SuggestionKO=\nDon't use Inclusive Gateway: 
UsageInclusiveORGateways.SuggestionOK=Well done\!
UsageInclusiveORGateways.SuggestionSubprocessKO=\nDon't use Inclusive Gateway in SubProcess 
UsageMeaningfulGateways.Description=The designer should not represent gateways that have only one incoming and only one outgoing sequence flow. Gateways with only one incoming and one outgoing sequence flow do not provide any added value.
UsageMeaningfulGateways.Name=Use meaningful gateways
UsageMeaningfulGateways.SuggestionKO=Remove Gateways with only one incoming/outgoing sequence flow:
UsageMeaningfulGateways.SuggestionOK=Well done\!